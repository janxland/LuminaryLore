[{"E:\\project\\xuexi\\LuminaryLore\\app\\Collection.tsx":"1","E:\\project\\xuexi\\LuminaryLore\\app\\ContinueViewing.tsx":"2","E:\\project\\xuexi\\LuminaryLore\\app\\detail\\Background.tsx":"3","E:\\project\\xuexi\\LuminaryLore\\app\\detail\\BaseDetail.tsx":"4","E:\\project\\xuexi\\LuminaryLore\\app\\detail\\Credits.tsx":"5","E:\\project\\xuexi\\LuminaryLore\\app\\detail\\Episodes.tsx":"6","E:\\project\\xuexi\\LuminaryLore\\app\\detail\\Footer.tsx":"7","E:\\project\\xuexi\\LuminaryLore\\app\\detail\\loading.tsx":"8","E:\\project\\xuexi\\LuminaryLore\\app\\detail\\page.tsx":"9","E:\\project\\xuexi\\LuminaryLore\\app\\detail\\Skeletion.tsx":"10","E:\\project\\xuexi\\LuminaryLore\\app\\detail\\Title.tsx":"11","E:\\project\\xuexi\\LuminaryLore\\app\\extension\\InstalledTab.tsx":"12","E:\\project\\xuexi\\LuminaryLore\\app\\extension\\Item.tsx":"13","E:\\project\\xuexi\\LuminaryLore\\app\\extension\\loading.tsx":"14","E:\\project\\xuexi\\LuminaryLore\\app\\extension\\page.tsx":"15","E:\\project\\xuexi\\LuminaryLore\\app\\extension\\RepoTab.tsx":"16","E:\\project\\xuexi\\LuminaryLore\\app\\i18n\\index.ts":"17","E:\\project\\xuexi\\LuminaryLore\\app\\i18n\\settings.ts":"18","E:\\project\\xuexi\\LuminaryLore\\app\\layout.tsx":"19","E:\\project\\xuexi\\LuminaryLore\\app\\page.tsx":"20","E:\\project\\xuexi\\LuminaryLore\\app\\RootProvider.tsx":"21","E:\\project\\xuexi\\LuminaryLore\\app\\search\\loading.tsx":"22","E:\\project\\xuexi\\LuminaryLore\\app\\search\\page.tsx":"23","E:\\project\\xuexi\\LuminaryLore\\app\\search\\Result.tsx":"24","E:\\project\\xuexi\\LuminaryLore\\app\\search\\SearchAll.tsx":"25","E:\\project\\xuexi\\LuminaryLore\\app\\settings\\AboutTab.tsx":"26","E:\\project\\xuexi\\LuminaryLore\\app\\settings\\DataTab.tsx":"27","E:\\project\\xuexi\\LuminaryLore\\app\\settings\\GeneralTab.tsx":"28","E:\\project\\xuexi\\LuminaryLore\\app\\settings\\Input.tsx":"29","E:\\project\\xuexi\\LuminaryLore\\app\\settings\\loading.tsx":"30","E:\\project\\xuexi\\LuminaryLore\\app\\settings\\page.tsx":"31","E:\\project\\xuexi\\LuminaryLore\\app\\settings\\Select.tsx":"32","E:\\project\\xuexi\\LuminaryLore\\app\\settings\\Title.tsx":"33","E:\\project\\xuexi\\LuminaryLore\\pages\\404.tsx":"34","E:\\project\\xuexi\\LuminaryLore\\pages\\api\\request\\[...all].ts":"35","E:\\project\\xuexi\\LuminaryLore\\components\\BaseMargin.tsx":"36","E:\\project\\xuexi\\LuminaryLore\\components\\CheckUpdata.tsx":"37","E:\\project\\xuexi\\LuminaryLore\\components\\common\\Button.tsx":"38","E:\\project\\xuexi\\LuminaryLore\\components\\common\\IconButton.tsx":"39","E:\\project\\xuexi\\LuminaryLore\\components\\common\\Input.tsx":"40","E:\\project\\xuexi\\LuminaryLore\\components\\common\\LazyElement.tsx":"41","E:\\project\\xuexi\\LuminaryLore\\components\\common\\LoadingImg.tsx":"42","E:\\project\\xuexi\\LuminaryLore\\components\\common\\Select.tsx":"43","E:\\project\\xuexi\\LuminaryLore\\components\\ErrorView.tsx":"44","E:\\project\\xuexi\\LuminaryLore\\components\\icons\\icon.ts":"45","E:\\project\\xuexi\\LuminaryLore\\components\\icons\\IconLogo.tsx":"46","E:\\project\\xuexi\\LuminaryLore\\components\\InitView.tsx":"47","E:\\project\\xuexi\\LuminaryLore\\components\\ItemGrid.tsx":"48","E:\\project\\xuexi\\LuminaryLore\\components\\Layout.tsx":"49","E:\\project\\xuexi\\LuminaryLore\\components\\LoadingBox.tsx":"50","E:\\project\\xuexi\\LuminaryLore\\components\\Logo.tsx":"51","E:\\project\\xuexi\\LuminaryLore\\components\\Modal.tsx":"52","E:\\project\\xuexi\\LuminaryLore\\components\\Player\\Bangumi.tsx":"53","E:\\project\\xuexi\\LuminaryLore\\components\\Player\\control.tsx":"54","E:\\project\\xuexi\\LuminaryLore\\components\\Player\\Fikushon.tsx":"55","E:\\project\\xuexi\\LuminaryLore\\components\\Player\\Index.tsx":"56","E:\\project\\xuexi\\LuminaryLore\\components\\Player\\Manga.tsx":"57","E:\\project\\xuexi\\LuminaryLore\\components\\Sidebar.tsx":"58","E:\\project\\xuexi\\LuminaryLore\\components\\SkeletonBlock.tsx":"59","E:\\project\\xuexi\\LuminaryLore\\components\\SwitchTitle.tsx":"60","E:\\project\\xuexi\\LuminaryLore\\components\\Tab.tsx":"61"},{"size":1967,"mtime":1691318984266,"results":"62","hashOfConfig":"63"},{"size":4205,"mtime":1691318984266,"results":"64","hashOfConfig":"63"},{"size":643,"mtime":1691318984268,"results":"65","hashOfConfig":"63"},{"size":11760,"mtime":1691495757280,"results":"66","hashOfConfig":"63"},{"size":3585,"mtime":1691318984270,"results":"67","hashOfConfig":"63"},{"size":8469,"mtime":1691318984270,"results":"68","hashOfConfig":"63"},{"size":5871,"mtime":1691318984271,"results":"69","hashOfConfig":"63"},{"size":102,"mtime":1691318984272,"results":"70","hashOfConfig":"63"},{"size":2549,"mtime":1691318984273,"results":"71","hashOfConfig":"63"},{"size":2342,"mtime":1691318984271,"results":"72","hashOfConfig":"63"},{"size":240,"mtime":1691318984272,"results":"73","hashOfConfig":"63"},{"size":8561,"mtime":1691318984274,"results":"74","hashOfConfig":"63"},{"size":1233,"mtime":1691318984274,"results":"75","hashOfConfig":"63"},{"size":779,"mtime":1691318984275,"results":"76","hashOfConfig":"63"},{"size":961,"mtime":1691318984276,"results":"77","hashOfConfig":"63"},{"size":5843,"mtime":1691318984275,"results":"78","hashOfConfig":"63"},{"size":774,"mtime":1691318984277,"results":"79","hashOfConfig":"63"},{"size":395,"mtime":1691318984287,"results":"80","hashOfConfig":"63"},{"size":1536,"mtime":1692084441425,"results":"81","hashOfConfig":"63"},{"size":957,"mtime":1691318984288,"results":"82","hashOfConfig":"63"},{"size":1033,"mtime":1691318984267,"results":"83","hashOfConfig":"63"},{"size":1065,"mtime":1691318984290,"results":"84","hashOfConfig":"63"},{"size":3810,"mtime":1691318984290,"results":"85","hashOfConfig":"63"},{"size":3848,"mtime":1691318984289,"results":"86","hashOfConfig":"63"},{"size":3316,"mtime":1691318984289,"results":"87","hashOfConfig":"63"},{"size":1030,"mtime":1691318984291,"results":"88","hashOfConfig":"63"},{"size":7253,"mtime":1691318984292,"results":"89","hashOfConfig":"63"},{"size":1985,"mtime":1691318984292,"results":"90","hashOfConfig":"63"},{"size":1659,"mtime":1691318984293,"results":"91","hashOfConfig":"63"},{"size":803,"mtime":1691318984295,"results":"92","hashOfConfig":"63"},{"size":1064,"mtime":1691318984295,"results":"93","hashOfConfig":"63"},{"size":375,"mtime":1691318984293,"results":"94","hashOfConfig":"63"},{"size":308,"mtime":1691318984294,"results":"95","hashOfConfig":"63"},{"size":679,"mtime":1691318984320,"results":"96","hashOfConfig":"63"},{"size":786,"mtime":1691564635566,"results":"97","hashOfConfig":"63"},{"size":381,"mtime":1691318984296,"results":"98","hashOfConfig":"63"},{"size":500,"mtime":1691318984297,"results":"99","hashOfConfig":"63"},{"size":666,"mtime":1691318984306,"results":"100","hashOfConfig":"63"},{"size":428,"mtime":1691318984307,"results":"101","hashOfConfig":"63"},{"size":392,"mtime":1691318984307,"results":"102","hashOfConfig":"63"},{"size":993,"mtime":1691318984307,"results":"103","hashOfConfig":"63"},{"size":1511,"mtime":1691318984308,"results":"104","hashOfConfig":"63"},{"size":912,"mtime":1691318984309,"results":"105","hashOfConfig":"63"},{"size":708,"mtime":1691318984297,"results":"106","hashOfConfig":"63"},{"size":129,"mtime":1691318984310,"results":"107","hashOfConfig":"63"},{"size":639,"mtime":1691318984309,"results":"108","hashOfConfig":"63"},{"size":536,"mtime":1691318984298,"results":"109","hashOfConfig":"63"},{"size":1423,"mtime":1691318984298,"results":"110","hashOfConfig":"63"},{"size":387,"mtime":1691318984299,"results":"111","hashOfConfig":"63"},{"size":405,"mtime":1691318984299,"results":"112","hashOfConfig":"63"},{"size":438,"mtime":1691318984299,"results":"113","hashOfConfig":"63"},{"size":1401,"mtime":1691318984300,"results":"114","hashOfConfig":"63"},{"size":15879,"mtime":1691569171585,"results":"115","hashOfConfig":"63"},{"size":1740,"mtime":1691570675199,"results":"116","hashOfConfig":"63"},{"size":3319,"mtime":1691318984302,"results":"117","hashOfConfig":"63"},{"size":9842,"mtime":1691569483400,"results":"118","hashOfConfig":"63"},{"size":7515,"mtime":1691657856785,"results":"119","hashOfConfig":"63"},{"size":3040,"mtime":1691318984304,"results":"120","hashOfConfig":"63"},{"size":373,"mtime":1691318984304,"results":"121","hashOfConfig":"63"},{"size":1043,"mtime":1691318984305,"results":"122","hashOfConfig":"63"},{"size":1766,"mtime":1691318984305,"results":"123","hashOfConfig":"63"},{"filePath":"124","messages":"125","suppressedMessages":"126","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"127"},"5chnsq",{"filePath":"128","messages":"129","suppressedMessages":"130","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"131"},{"filePath":"132","messages":"133","suppressedMessages":"134","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"135","messages":"136","suppressedMessages":"137","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"138"},{"filePath":"139","messages":"140","suppressedMessages":"141","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"142","messages":"143","suppressedMessages":"144","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"145"},{"filePath":"146","messages":"147","suppressedMessages":"148","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"149"},{"filePath":"150","messages":"151","suppressedMessages":"152","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"153","messages":"154","suppressedMessages":"155","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"156"},{"filePath":"157","messages":"158","suppressedMessages":"159","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"160","messages":"161","suppressedMessages":"162","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"163","messages":"164","suppressedMessages":"165","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"166","messages":"167","suppressedMessages":"168","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"169"},{"filePath":"170","messages":"171","suppressedMessages":"172","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"173","messages":"174","suppressedMessages":"175","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"176"},{"filePath":"177","messages":"178","suppressedMessages":"179","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"180"},{"filePath":"181","messages":"182","suppressedMessages":"183","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"184","messages":"185","suppressedMessages":"186","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"187","messages":"188","suppressedMessages":"189","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"190","messages":"191","suppressedMessages":"192","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"193"},{"filePath":"194","messages":"195","suppressedMessages":"196","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"197","messages":"198","suppressedMessages":"199","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"200","messages":"201","suppressedMessages":"202","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"203"},{"filePath":"204","messages":"205","suppressedMessages":"206","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"207","messages":"208","suppressedMessages":"209","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"210","messages":"211","suppressedMessages":"212","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"213","messages":"214","suppressedMessages":"215","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"216"},{"filePath":"217","messages":"218","suppressedMessages":"219","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"220","messages":"221","suppressedMessages":"222","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"223"},{"filePath":"224","messages":"225","suppressedMessages":"226","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"227","messages":"228","suppressedMessages":"229","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"230"},{"filePath":"231","messages":"232","suppressedMessages":"233","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"234","messages":"235","suppressedMessages":"236","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"237","messages":"238","suppressedMessages":"239","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"240","messages":"241","suppressedMessages":"242","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"243","messages":"244","suppressedMessages":"245","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"246","messages":"247","suppressedMessages":"248","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"249","messages":"250","suppressedMessages":"251","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"252","messages":"253","suppressedMessages":"254","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"255","messages":"256","suppressedMessages":"257","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"258","messages":"259","suppressedMessages":"260","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"261","messages":"262","suppressedMessages":"263","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"264"},{"filePath":"265","messages":"266","suppressedMessages":"267","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"268","messages":"269","suppressedMessages":"270","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"271","messages":"272","suppressedMessages":"273","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"274","messages":"275","suppressedMessages":"276","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"277","messages":"278","suppressedMessages":"279","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"280","messages":"281","suppressedMessages":"282","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"283","messages":"284","suppressedMessages":"285","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"286","messages":"287","suppressedMessages":"288","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"289","messages":"290","suppressedMessages":"291","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"292","messages":"293","suppressedMessages":"294","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"295","messages":"296","suppressedMessages":"297","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"298"},{"filePath":"299","messages":"300","suppressedMessages":"301","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"302","messages":"303","suppressedMessages":"304","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"305"},{"filePath":"306","messages":"307","suppressedMessages":"308","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"309"},{"filePath":"310","messages":"311","suppressedMessages":"312","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"313"},{"filePath":"314","messages":"315","suppressedMessages":"316","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"317","messages":"318","suppressedMessages":"319","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"320","messages":"321","suppressedMessages":"322","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"323","messages":"324","suppressedMessages":"325","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"E:\\project\\xuexi\\LuminaryLore\\app\\Collection.tsx",["326","327"],[],"\"use client\";\nimport ErrorView from \"@/components/ErrorView\";\nimport ItemGrid from \"@/components/ItemGrid\";\nimport LoadingBox from \"@/components/LoadingBox\";\nimport { useRootStore } from \"@/context/root-context\";\nimport { loveDB } from \"@/db\";\nimport { getModel } from \"@/utils/model\";\nimport { useQuery } from \"@tanstack/react-query\";\nimport { observer } from \"mobx-react-lite\";\nimport Link from \"next/link\";\nimport { useEffect } from \"react\";\nimport { useTranslation } from \"@/app/i18n\";\n\nconst Collection = observer(() => {\n    const { settingsStore } = useRootStore();\n    const { t } = useTranslation(\"home\");\n    const { error, data, isLoading, refetch } = useQuery({\n        queryKey: [\"getLoveData\"],\n        queryFn: async () =>\n            loveDB.getAllLoveByType(\n                getModel(settingsStore.getSetting(\"model\"))\n            ),\n    });\n\n    useEffect(() => {\n        refetch();\n    }, [settingsStore.getSetting(\"model\")]);\n\n    if (isLoading) {\n        return <LoadingBox></LoadingBox>;\n    }\n\n    if (error) {\n        return <ErrorView error={error}></ErrorView>;\n    }\n\n    if (!data || data.length === 0) {\n        return (\n            <div className=\"m-28 text-center text-gray-400\">\n                <p>{t(\"no-collection.title\")}</p>\n                <p>{t(\"no-collection.message\")}</p>\n            </div>\n        );\n    }\n\n    return (\n        <ItemGrid.Grid>\n            {data.map((love) => (\n                <Link\n                    key={love.id}\n                    href={{\n                        pathname: \"/detail\",\n                        query: {\n                            pkg: love.package,\n                            url: love.url,\n                            cover: love.cover,\n                        },\n                    }}\n                >\n                    <ItemGrid.Fragment itemData={love}></ItemGrid.Fragment>\n                </Link>\n            ))}\n        </ItemGrid.Grid>\n    );\n});\n\nexport default Collection;\n","E:\\project\\xuexi\\LuminaryLore\\app\\ContinueViewing.tsx",["328","329"],[],"\"use client\";\nimport CheckUpdate from \"@/components/CheckUpdata\";\nimport LoadingImg from \"@/components/common/LoadingImg\";\nimport ErrorView from \"@/components/ErrorView\";\nimport LoadingBox from \"@/components/LoadingBox\";\nimport { useRootStore } from \"@/context/root-context\";\nimport { getModel } from \"@/utils/model\";\nimport { useQuery } from \"@tanstack/react-query\";\nimport { observer } from \"mobx-react-lite\";\nimport Link from \"next/link\";\nimport { useEffect } from \"react\";\nimport { useTranslation } from \"@/app/i18n\";\n\nconst ContinueVewing = observer(() => {\n    const { settingsStore, historyStore } = useRootStore();\n    const { t } = useTranslation(\"home\");\n    const { error, data, isLoading, refetch } = useQuery({\n        queryKey: [\"getHistoryData\"],\n        queryFn: async () =>\n            historyStore.getHistoryByType(\n                getModel(settingsStore.getSetting(\"model\")),\n                8\n            ),\n    });\n\n    useEffect(() => {\n        refetch();\n    }, [settingsStore.getSetting(\"model\"), historyStore.history]);\n\n    if (isLoading) {\n        return <LoadingBox></LoadingBox>;\n    }\n\n    if (error) {\n        return <ErrorView error={error}></ErrorView>;\n    }\n\n    if (!data || data.length === 0) {\n        return (\n            <div className=\"m-14 text-center text-gray-400\">\n                <p>{t(\"no-continue-viewing.title\")}</p>\n                <p>{t(\"no-continue-viewing.message\")}</p>\n            </div>\n        );\n    }\n\n    return (\n        <div className=\"-ml-230px flex overflow-auto pb-3 scrollbar-none\">\n            <div className=\"ml-230px\"></div>\n            {data.map((history, index) => (\n                <div\n                    className=\"relative mr-4 flex-shrink-0 overflow-hidden rounded-lg\"\n                    key={index}\n                    style={{ width: \"350px\", height: \"200px\" }}\n                >\n                    <Link\n                        href={{\n                            pathname: \"/detail\",\n                            query: {\n                                pkg: history.package,\n                                url: history.url,\n                            },\n                        }}\n                    >\n                        {(history.type === \"fikushon\" && (\n                            <div className=\"h-full w-full \">\n                                <div className=\"m-auto  h-full rounded bg-slate-200 p-2 text-lg dark:bg-black dark:bg-opacity-40\">\n                                    {history.cover as string}\n                                </div>\n                            </div>\n                        )) ||\n                            (history.cover && (\n                                <LoadingImg\n                                    className=\"h-full w-full object-cover\"\n                                    src={history.cover as string}\n                                    alt={history.title}\n                                />\n                            )) || (\n                                // 没有图片显示随机的颜色块\n                                <div\n                                    className=\"h-full w-full\"\n                                    style={{\n                                        backgroundColor: `hsl(${Math.floor(\n                                            Math.random() * 360\n                                        )}, 100%, 80%)`,\n                                    }}\n                                ></div>\n                            )}\n                        <div className=\"absolute left-0 right-0 bottom-0 bg-gradient-to-t from-black p-2\">\n                            <p className=\" mt-3 mb-1 text-xs text-neutral-300\">\n                                <CheckUpdate\n                                    pkg={history.package}\n                                    url={history.url}\n                                ></CheckUpdate>{\" \"}\n                                看到 {history.chapter}\n                            </p>\n                            <p className=\"text-white\">{history.title}</p>\n                        </div>\n                    </Link>\n                </div>\n            ))}\n        </div>\n    );\n});\n\nexport default ContinueVewing;\n","E:\\project\\xuexi\\LuminaryLore\\app\\detail\\Background.tsx",[],[],"E:\\project\\xuexi\\LuminaryLore\\app\\detail\\BaseDetail.tsx",["330","331","332"],[],"\"use client\";\n\nimport LoadingImg from \"@/components/common/LoadingImg\";\nimport Modal from \"@/components/Modal\";\nimport { useRootStore } from \"@/context/root-context\";\nimport { useWatchContext } from \"@/context/watch-context\";\nimport { loveDB, tmdbDB } from \"@/db\";\nimport { Detail } from \"@/types/extension\";\nimport { ExternalLink, Heart, MoreHorizontal } from \"lucide-react\";\nimport { useEffect, useState } from \"react\";\nimport { useTranslation } from \"@/app/i18n\";\n\nexport default function BaseDetail() {\n    const { tmdbStore } = useRootStore();\n    const {\n        pkg,\n        url,\n        detail,\n        extension,\n        setWatchData,\n        tmdbId,\n        mediaType: media_type\n    } = useWatchContext();\n    const [metaData, setMetaData] = useState<Map<string, string>>(new Map());\n    const [overview, setOverview] = useState<string | undefined>(detail.desc);\n    const [showMore, setShowMore] = useState<boolean>(false);\n    const [genres, setGenres] = useState<string[]>();\n    const { t } = useTranslation(\"detail\");\n\n    // 获取 TMDB ID\n    // 也许可以获取个背景（（就不判断了\n    useEffect(() => {\n        // 先获取本地的\n        tmdbDB.getTMDB(pkg, url).then((tmdbData) => {\n            if (tmdbData) {\n                setWatchData((data) => {\n                    return {\n                        ...data!,\n                        tmdbId: tmdbData.tmdbId,\n                        mediaType: tmdbData.mediaType\n                    };\n                });\n                return;\n            }\n            // 本地没有，就去 TMDB 获取\n            tmdbStore.search(detail.title).then((res) => {\n                if (!res || res.length === 0) {\n                    return;\n                }\n                setWatchData((data) => {\n                    return {\n                        ...data!,\n                        tmdbId: res[0].id,\n                        mediaType: res[0].media_type\n                    };\n                });\n            });\n        });\n    }, []);\n\n    // 通过 TMDB 获取详情\n    useEffect(() => {\n        if (!tmdbId || extension.type !== \"bangumi\") {\n            return;\n        }\n        tmdbStore.getDetails(tmdbId, media_type!).then((res) => {\n            const map = new Map<string, string>();\n            if (res) {\n                map.set(\n                    t(\"detail.original-name\"),\n                    res.original_name ?? res.original_title\n                );\n                map.set(t(\"detail.language\"), res.original_language);\n                map.set(\n                    t(\"detail.release-date\"),\n                    res.first_air_date ?? res.release_date\n                );\n                map.set(t(\"detail.status\"), res.status);\n                map.set(\n                    t(\"detail.production-company\"),\n                    res.production_companies.map((c) => c.name).join(\",\")\n                );\n                map.set(\n                    t(\"detail.production-country\"),\n                    res.production_countries.map((c) => c.name).join(\",\")\n                );\n                map.set(t(\"detail.vote-average\"), res.vote_average.toString());\n                map.set(t(\"detail.vote-count\"), res.vote_count.toString());\n                if (media_type === \"movie\") {\n                    map.set(t(\"detail.runtime\"), res.runtime.toString());\n                } else {\n                    map.set(\n                        t(\"detail.episode-run-time\"),\n                        res.episode_run_time.join(\",\")\n                    );\n                    map.set(\n                        t(\"detail.number-of-episodes\"),\n                        res.number_of_episodes.toString()\n                    );\n                    map.set(\n                        t(\"detail.number-of-seasons\"),\n                        res.number_of_seasons.toString()\n                    );\n                }\n                map.set(\n                    t(\"detail.spoken-language\"),\n                    res.spoken_languages.map((c) => c.name).join(\",\")\n                );\n                map.set(t(\"detail.popularity\"), res.popularity.toString());\n                map.set(t(\"detail.homepage\"), res.homepage ?? \"\");\n                setOverview(res.overview);\n                setGenres(res.genres.map((g) => g.name));\n            }\n            setMetaData(map);\n\n            // 设置背景\n            setWatchData((data) => {\n                return {\n                    ...data!,\n                    background: tmdbStore.getImageUrl(res!.backdrop_path)\n                };\n            });\n        });\n    }, [tmdbId]);\n\n    return (\n        <div className=\"mb-5 flex  md:mb-16 items-end \">\n            <div className=\"w-56 flex-col items-center mb-0 md:flex md:w-1/4 lg:w-1/5\">\n                <LoadingImg\n                    className=\"mb-3 rounded-xl shadow-2xl ring-4 ring-gray-300 md:block w-full\"\n                    src={detail?.cover}\n                    alt={detail.title}\n                />\n                <div className=\"mt-3 flex w-full flex-col justify-between md:mt-0 xl:flex-row\">\n                    <LoveButton\n                        pkg={pkg}\n                        url={url}\n                        data={detail}\n                        type={extension.type}\n                    ></LoveButton>\n                </div>\n            </div>\n            <div className=\"w-full ml-5 md:mt-10 md:w-3/4 lg:w-4/5\">\n                <div className=\"mb-1 text-xl md:text-3xl\">{detail?.title}</div>\n                <div className=\"mb-3 text-gray-500 dark:text-white dark:text-opacity-60\">\n                    {genres?.map((g, index) => (\n                        <span key={index} className=\"mr-1\">\n                            {g}\n                        </span>\n                    ))}\n                </div>\n                <div className=\"max-h-48 overflow-hidden\">\n                    <div className=\"mb-3 hidden md:block\">\n                        {Array.from(metaData.entries()).map((item, index) => (\n                            <p key={index} className=\"mb-1\">\n                                <span className=\"font-bold\">{item[0]}</span>\n                                {item[1]}\n                            </p>\n                        ))}\n                        {/* 如果 TMDB 找不到数据就会显示扩展的元数据 */}\n                        {detail.metadata &&\n                            Object.keys(detail.metadata).map((key, index) => (\n                                <p key={index} className=\"mb-1\">\n                                    <span className=\"font-bold\">{key}: </span>\n                                    {detail.metadata![key]}\n                                </p>\n                            ))}\n                        <p className=\"mb-1 flex items-center\">\n                            <span className=\"mr-2 font-bold\">\n                                {t(\"origin-site\")}\n                            </span>\n                            <a\n                                href={extension.webSite + url}\n                                target=\"_blank\"\n                                rel=\"noreferrer\"\n                            >\n                                <ExternalLink size={20} />\n                            </a>\n                        </p>\n                    </div>\n                    <div className=\"max-h-24 overflow-auto md:h-full\">\n                        <p>{overview}</p>\n                    </div>\n                </div>\n                {/* 展开按钮 */}\n                <div className=\"flex \">\n                    <button\n                        className=\"text-gray-500 dark:text-white dark:text-opacity-60 \"\n                        onClick={() => setShowMore(!showMore)}\n                    >\n                        <MoreHorizontal />\n                    </button>\n                </div>\n                <Modal\n                    show={showMore}\n                    onClose={() => {\n                        setShowMore(false);\n                    }}\n                    title={detail.title}\n                >\n                    <div className=\"mb-3\">\n                        {metaData.size > 0 && (\n                            <>\n                                <h3 className=\"mb-3 border-b pb-2 font-bold\">\n                                    {t(\"from-tmdb\")}\n                                </h3>\n                                <div className=\"mb-3 grid grid-cols-2\">\n                                    {Array.from(metaData.entries()).map(\n                                        (item, index) => (\n                                            <p key={index} className=\"mb-1\">\n                                                <span className=\"font-bold\">\n                                                    {item[0]}\n                                                </span>\n                                                {item[1].length > 20 && <br className=\"mb-2\" />}\n                                                {item[1]}\n                                            </p>\n                                        )\n                                    )}\n                                </div>\n                            </>\n                        )}\n                        <h3 className=\"mb-3 border-b pb-2 font-bold\">\n                            {t(\"from-extension\")}\n                        </h3>\n                        {detail.metadata &&\n                            Object.keys(detail.metadata).map((key, index) => (\n                                <p key={index} className=\"mb-1\">\n                                    <span className=\"font-bold\">{key}: </span>\n                                    {detail.metadata![key]}\n                                </p>\n                            ))}\n                        <p className=\"mb-1 flex items-center\">\n                            <span className=\"mr-2 font-bold\">\n                                {t(\"origin-site\")}\n                            </span>\n                            <a\n                                href={extension.webSite + url}\n                                target=\"_blank\"\n                                rel=\"noreferrer\"\n                            >\n                                <ExternalLink size={20} />\n                            </a>\n                        </p>\n                    </div>\n                    <div className=\"max-h-52 overflow-auto md:h-full\">\n                        <p>{overview}</p>\n                    </div>\n                </Modal>\n            </div>\n        </div>\n    );\n}\n\nfunction LoveButton(\n    {\n        pkg,\n        url,\n        type,\n        data\n    }: {\n        pkg: string;\n        url: string;\n        type: any;\n        data: Detail;\n    }) {\n    const [isLove, setIsLove] = useState(false);\n    const { t } = useTranslation(\"detail\");\n    useEffect(() => {\n        checkLove();\n    }, []);\n\n    const handleLove = () => {\n        loveDB\n            .loveOrUnLove({\n                package: pkg,\n                url: url,\n                title: data.title,\n                cover: data.cover,\n                type: type\n            })\n            .finally(() => {\n                checkLove();\n            });\n    };\n\n    const checkLove = () => {\n        loveDB.isLove(pkg, url).then((res) => {\n            setIsLove(res);\n        });\n    };\n\n    return (\n        <button\n            onClick={handleLove}\n            className=\"w-full rounded-xl border bg-black pl-4 pr-4 pt-2 pb-2 text-lg text-white focus:ring-2 focus:ring-gray-500\"\n        >\n            <div className=\"flex items-center justify-center\">\n                <Heart className=\"mr-1\" fill={isLove ? \"#fff\" : \"\"}></Heart>\n                {isLove ? t(\"collected\") : t(\"collect\")}\n            </div>\n        </button>\n    );\n}\n","E:\\project\\xuexi\\LuminaryLore\\app\\detail\\Credits.tsx",[],[],"E:\\project\\xuexi\\LuminaryLore\\app\\detail\\Episodes.tsx",["333","334"],[],"\"use client\";\n\nimport Button from \"@/components/common/Button\";\nimport Tab, { Tabs } from \"@/components/Tab\";\nimport { useRootStore } from \"@/context/root-context\";\nimport { useWatchContext } from \"@/context/watch-context\";\nimport { closeSnackbar, enqueueSnackbar } from \"notistack\";\nimport React, { ReactNode, useEffect, useRef, useState } from \"react\";\nimport { useTranslation } from \"@/app/i18n\";\nimport Title from \"./Title\";\nimport clsx from \"clsx\";\nimport { MoreVertical } from \"lucide-react\";\nimport { observer } from \"mobx-react-lite\";\n\n// 剧集\nconst Episodes = observer(() => {\n    const { historyStore, playerStore } = useRootStore();\n    const { detail, url: pageUrl, pkg, extension } = useWatchContext();\n    const [episodesTabs, setEpisodesTabs] = useState<Tabs[]>([]);\n    const { t } = useTranslation(\"detail\");\n    const [menu, setMenu] = useState<ReactNode | null>(null);\n    const menuRef = useRef<HTMLDivElement>(null);\n\n    const handlePlay = (\n        index: number,\n        nextPlayers: { url: string; chapter: string }[]\n    ) => {\n        // 清空列表\n        playerStore.clearPlayList();\n\n        nextPlayers.map((item, _) => {\n            playerStore.pushPlay({\n                url: item.url,\n                chapter: item.chapter,\n                pageUrl,\n                pkg,\n                title: detail.title,\n                type: extension.type\n            });\n        });\n\n        // 切换播放\n        playerStore.togglePlay(index);\n        playerStore.toggleMini(false);\n    };\n\n    const handleMore = (e: React.MouseEvent<HTMLDivElement>, url: string, chapter: string) => {\n\n        const play = {\n            url,\n            pageUrl,\n            chapter,\n            title: detail.title,\n            type: extension.type,\n            pkg\n        };\n\n\n        const handleClose = () => {\n            setMenu(null);\n        };\n\n        // 获取当前window的宽度\n        const windowWidth = window.innerWidth;\n\n        const menus: { text: string, action: () => void }[] = [\n            {\n                text: t(\"menu.add-to-next-play\"),\n                action: () => {\n                    playerStore.addNextPlay(play);\n                }\n            }, {\n                text: t(\"menu.add-to-playlist\"),\n                action: () => {\n                    playerStore.pushPlay(play);\n                }\n            }\n        ];\n\n\n        setMenu(\n            <div ref={menuRef}>\n                <div className=\"fixed left-0 right-0 bottom-0 top-0 bg-black opacity-50 md:opacity-0\"\n                     style={{\n                         zIndex: \"60\"\n                     }}\n                     onClick={handleClose}></div>\n                <div\n                    className=\"fixed bottom-0 md:bottom-auto rounded-t-lg w-full md:absolute md:rounded-lg text-white bg-black md:w-48 overflow-hidden shadow-2xl\"\n                    onClick={handleClose}\n                    style={{\n                        top: windowWidth > 1024 ? e.currentTarget.offsetTop + 30 : \"auto\",\n                        left: windowWidth > 1024 ? e.currentTarget.offsetLeft - 30 : 0,\n                        zIndex: \"70\"\n                    }}\n                >\n                    {\n                        menus.map((item, index) => (\n                            <div key={index} className=\"mb-1 p-3 cursor-pointer hover:bg-neutral-800\"\n                                 onClick={item.action}>{item.text} </div>\n                        ))\n                    }\n                </div>\n            </div>\n        );\n\n\n        //窗口发生变化时，移除menu\n        window.addEventListener(\"resize\", () => {\n            handleClose();\n        });\n    };\n\n    useEffect(() => {\n        if (!detail.episodes) {\n            return;\n        }\n        setEpisodesTabs(\n            detail.episodes.map((item, _) => {\n                return {\n                    title: item.title,\n                    content: (\n                        <div className=\"grid grid-cols-2 md:grid-cols-4 lg:grid-cols-6 gap-2 p-1\">\n                            {item.urls.map((value, index) => {\n                                return (\n                                    <div\n                                        className={clsx(\n                                            \"flex justify-between items-center overflow-hidden bg-neutral-200 text-black dark:text-white dark:bg-black dark:bg-opacity-60 h-14 rounded-lg\",\n                                            {\n                                                \"ring-2 ring-gray-700 dark:ring-gray-200\": playerStore.currentPlay?.url === value.url\n                                            }\n                                        )}\n                                        key={index}>\n                                        <span\n                                            className=\"cursor-pointer truncate w-full h-full flex items-center p-2 hover:bg-neutral-300 dark:hover:bg-neutral-800\"\n                                            onClick={() =>\n                                                handlePlay(\n                                                    index,\n                                                    item.urls.map((value, _) => ({\n                                                        url: value.url,\n                                                        chapter: `${item.title}|${value.name}`\n                                                    }))\n                                                )\n                                            }\n                                        >\n                                        {value.name}\n                                        </span>\n                                        <div className=\"cursor-pointer hover:opacity-60\" onClick={(e) => {\n                                            handleMore(e, value.url, `${item.title}|${value.name}`);\n                                        }}>\n                                            <MoreVertical />\n                                        </div>\n                                    </div>\n                                );\n                            })}\n                        </div>\n                    )\n                };\n            })\n        );\n    }, [detail, playerStore.currentPlay]);\n\n    useEffect(() => {\n        // 获取历史记录提示播放到哪一集\n        historyStore.getHistory(pageUrl, pkg).then((res) => {\n            if (!res) {\n                return;\n            }\n            enqueueSnackbar(t(\"last-watch\", { chapter: res.chapter }), {\n                persist: false,\n                action: (key) => (\n                    <Button\n                        onClick={() => {\n                            // 通过detail.episodes找到对应的url\n                            const chap = res?.chapter.split(\"|\");\n                            if (!chap || chap.length !== 2) {\n                                enqueueSnackbar(t(\"detail-record-error\"), {\n                                    variant: \"error\"\n                                });\n                                return;\n                            }\n                            detail.episodes?.map((item, _) => {\n                                item.urls.map((value, index) => {\n                                    if (\n                                        item.title === chap[0] &&\n                                        value.name === chap[1]\n                                    ) {\n                                        handlePlay(\n                                            index,\n                                            item.urls.map((value, _) => ({\n                                                url: value.url,\n                                                chapter: `${item.title}|${value.name}`\n                                            }))\n                                        );\n                                    }\n                                });\n                            });\n                            closeSnackbar(key);\n                        }}\n                    >\n                        {t(\"continue-watch\")}\n                    </Button>\n                )\n            });\n        });\n    }, []);\n\n    return (\n        <div className=\"mb-6\">\n            <Title>{t(\"episodes\")}</Title>\n            <div>\n                <Tab tabs={episodesTabs}></Tab>\n            </div>\n            {menu}\n        </div>\n    );\n});\n\nexport default Episodes;","E:\\project\\xuexi\\LuminaryLore\\app\\detail\\Footer.tsx",["335","336"],[],"\"use client\";\n\nimport Button from \"@/components/common/Button\";\nimport Input from \"@/components/common/Input\";\nimport ErrorView from \"@/components/ErrorView\";\nimport LoadingBox from \"@/components/LoadingBox\";\nimport Modal from \"@/components/Modal\";\nimport { useRootStore } from \"@/context/root-context\";\nimport { useWatchContext } from \"@/context/watch-context\";\nimport { tmdbDB } from \"@/db\";\nimport { SearchResult } from \"@/types/tmdb\";\nimport { useInfiniteQuery } from \"@tanstack/react-query\";\nimport { useState } from \"react\";\nimport { useTranslation } from \"@/app/i18n\";\n\nexport default function Footer() {\n    const { extension } = useWatchContext();\n    const { t } = useTranslation(\"detail\");\n    const [showModal, setShowModal] = useState(false);\n    const [kw, setKw] = useState(\"\");\n    const [serachKw, setSearchKw] = useState(\"\");\n    const handleSearch = (e: React.FormEvent<HTMLFormElement>) => {\n        e.preventDefault();\n        setSearchKw(kw);\n    };\n    return (\n        <div className=\"mb-3 flex items-center justify-center\">\n            <div className=\"text-center text-black text-opacity-40 dark:text-white dark:text-opacity-40\">\n                <p>{t(\"footer.origin\", { ext: extension.name })}</p>\n                <p>\n                    {t(\"footer.infomation-error\")}{\" \"}\n                    <span\n                        className=\"cursor-pointer font-bold\"\n                        onClick={() => setShowModal(true)}\n                    >\n                        {t(\"footer.change\")}\n                    </span>\n                </p>\n            </div>\n            <Modal\n                show={showModal}\n                onClose={() => setShowModal(false)}\n                title={t(\"changing-tmdb-metadata-targets\")}\n            >\n                {/* 搜索框 */}\n                <form className=\"mb-3\" onSubmit={handleSearch}>\n                    <Input\n                        className=\"w-full\"\n                        value={kw}\n                        onChange={(e) => setKw(e.target.value)}\n                        placeholder={\n                            t(\"enter-the-current-movie-keyword\") as string\n                        }\n                    ></Input>\n                </form>\n                {/* 搜索结果 */}\n                <TMDBModalSearchResult\n                    kw={serachKw}\n                    onClose={() => setShowModal(false)}\n                />\n                <div className=\"text-center\">\n                    <p className=\"text-center text-black text-opacity-40  dark:text-white dark:text-opacity-40\">\n                        {t(\"changing-tmdb-metadata-targets-tips\")}\n                    </p>\n                </div>\n            </Modal>\n        </div>\n    );\n}\n\nfunction TMDBModalSearchResult({\n    kw,\n    onClose,\n}: {\n    kw: string;\n    onClose: () => void;\n}) {\n    const { t } = useTranslation([\"detail\", \"common\"]);\n    const { url, pkg, setWatchData } = useWatchContext();\n    const { settingsStore } = useRootStore();\n    const { tmdbStore } = useRootStore();\n    const { error, data, isLoading, isFetchingNextPage, fetchNextPage } =\n        useInfiniteQuery({\n            queryKey: [\"tmdbsearch\", kw],\n            queryFn: ({ pageParam }) => tmdbStore.search(kw, pageParam),\n            getNextPageParam: (lastPage, pages) => {\n                if (!lastPage) {\n                    return undefined;\n                }\n                if (lastPage.length === 0) {\n                    return undefined;\n                }\n                return pages.length + 1;\n            },\n        });\n\n    const handleTMDBChange = (tmdbResult: SearchResult) => {\n        tmdbDB.saveTMDB({\n            tmdbId: tmdbResult.id,\n            mediaType: tmdbResult.media_type,\n            url,\n            pkg,\n        });\n        setWatchData((data) => {\n            return {\n                ...data!,\n                tmdbId: tmdbResult.id,\n                mediaType: tmdbResult.media_type,\n            };\n        });\n        onClose();\n    };\n    if (!settingsStore.getSetting(\"TMDBKey\")) {\n        return (\n            <div className=\"mb-3\">\n                <ErrorView error={t(\"no-tmdb-key\")}></ErrorView>\n            </div>\n        );\n    }\n    if (error) {\n        return (\n            <div className=\"mb-3\">\n                <ErrorView error={error}></ErrorView>\n            </div>\n        );\n    }\n\n    if (isLoading) {\n        <div className=\"mb-3\">\n            <LoadingBox />\n        </div>;\n    }\n\n    return (\n        <div className=\"mb-3\">\n            <div className=\"grid grid-cols-2 gap-3 md:grid-cols-3 lg:grid-cols-4\">\n                {data?.pages &&\n                    data.pages.map((page) =>\n                        page!.map((item, index) => (\n                            <div\n                                key={index}\n                                className=\"cursor-pointer hover:opacity-80\"\n                                onClick={() => handleTMDBChange(item)}\n                            >\n                                <img\n                                    className=\"w-full rounded-md object-cover\"\n                                    src={tmdbStore.getImageUrl(\n                                        item.poster_path\n                                    )}\n                                />\n                                <div className=\"my-2 text-center\">\n                                    <p>{item.name ?? item.title}</p>\n                                </div>\n                            </div>\n                        ))\n                    )}\n            </div>\n            {kw && data?.pages && (\n                <div className=\"mb-3 text-center\">\n                    <Button onClick={() => fetchNextPage()}>\n                        {isFetchingNextPage ? t(\"loading\") : t(\"more\")}\n                    </Button>\n                </div>\n            )}\n        </div>\n    );\n}\n","E:\\project\\xuexi\\LuminaryLore\\app\\detail\\loading.tsx",[],[],"E:\\project\\xuexi\\LuminaryLore\\app\\detail\\page.tsx",["337"],[],"\"use client\";\nimport BaseMargin from \"@/components/BaseMargin\";\nimport ErrorView from \"@/components/ErrorView\";\nimport { useRootStore } from \"@/context/root-context\";\nimport { WatchData, WatchProvider } from \"@/context/watch-context\";\nimport { useQuery } from \"@tanstack/react-query\";\nimport { observer } from \"mobx-react-lite\";\nimport { useRouter, useSearchParams } from \"next/navigation\";\nimport { useEffect, useState } from \"react\";\nimport { useTranslation } from \"@/app/i18n\";\nimport { Background } from \"./Background\";\nimport BaseDetail from \"./BaseDetail\";\nimport Credits from \"./Credits\";\nimport Episodes from \"./Episodes\";\nimport Footer from \"./Footer\";\nimport Skeletion from \"./Skeletion\";\nimport changeTitle from \"@/utils/title-change\";\n\nconst WatchPage = observer(() => {\n    const searchParams = useSearchParams();\n    const route = useRouter();\n    const { extensionStore } = useRootStore();\n    const pkg = searchParams?.get(\"pkg\") as string;\n    const url = searchParams?.get(\"url\") as string;\n    const cover = searchParams?.get(\"cover\") as string;\n    const extension = extensionStore.getExtension(pkg);\n    const { t } = useTranslation(\"detail\");\n    const [watchData, setWatchData] = useState<WatchData>();\n    const { isLoading, error, isError, data } = useQuery({\n        queryKey: [\"detail\", pkg, url],\n        queryFn: () => extension?.detail(url),\n    });\n    useEffect(() => {\n        if (data) {\n            setWatchData({\n                detail: data!,\n                pkg,\n                url,\n                extension: extension!,\n                setWatchData,\n            });\n            // 更改标题\n            changeTitle(data.title)\n        }\n    }, [data]);\n\n    if (!pkg || !url) {\n        // 跳转到404\n        route.push(\"/404\");\n        return <></>;\n    }\n    if (!extension) {\n        return <ErrorView error={t(\"extension-lost\", { pkg })}></ErrorView>;\n    }\n\n    if (isError) {\n        return <ErrorView error={error} />;\n    }\n\n    if (isLoading || !watchData) {\n        return <Skeletion cover={cover} />;\n    }\n\n    if (!data) {\n        return <ErrorView error={t(\"not-found-data\")}></ErrorView>;\n    }\n\n    return (\n        <WatchProvider value={watchData}>\n            <Background />\n            <BaseMargin>\n                <div className=\"min-h-screen\">\n                    <BaseDetail />\n                    <Episodes />\n                    <Credits />\n                </div>\n                <Footer />\n            </BaseMargin>\n        </WatchProvider>\n    );\n});\n\nexport default WatchPage;\n","E:\\project\\xuexi\\LuminaryLore\\app\\detail\\Skeletion.tsx",[],[],"E:\\project\\xuexi\\LuminaryLore\\app\\detail\\Title.tsx",[],[],"E:\\project\\xuexi\\LuminaryLore\\app\\extension\\InstalledTab.tsx",[],[],"E:\\project\\xuexi\\LuminaryLore\\app\\extension\\Item.tsx",["338"],[],"import { ReactNode } from \"react\";\n\ninterface ExtensionProps {\n    name: string;\n    pkg: string;\n    version: string;\n    icon?: string;\n    children?: ReactNode;\n}\n\nexport default function Item(props: ExtensionProps) {\n    return (\n        <div className=\"mb-3 flex justify-between rounded-xl border p-3 text-black transition-all dark:bg-zinc-800  dark:text-white\">\n            <div className=\"flex\">\n                {props.icon ? (\n                    <img\n                        className=\"mr-3 hidden h-16 w-24 object-contain md:block\"\n                        src={props.icon}\n                        alt={props.name}\n                    />\n                ) : null}\n                <div>\n                    <p className=\"mb-1 text-lg\">\n                        {props.name}\n                        <span className=\"ml-1 rounded-full bg-black pl-2 pr-2 pt-1 pb-1 text-xs text-white dark:bg-neutral-600 dark:text-zinc-50\">\n                            {props.version}\n                        </span>\n                    </p>\n                    <p className=\"text-sm\">{props.pkg}</p>\n                </div>\n            </div>\n            <div className=\"flex items-end justify-end\">{props.children}</div>\n        </div>\n    );\n}\n","E:\\project\\xuexi\\LuminaryLore\\app\\extension\\loading.tsx",[],[],"E:\\project\\xuexi\\LuminaryLore\\app\\extension\\page.tsx",["339"],[],"\"use client\";\nimport BaseMargin from \"@/components/BaseMargin\";\nimport Layout from \"@/components/Layout\";\nimport SwitchTitle from \"@/components/SwitchTitle\";\nimport Tab from \"@/components/Tab\";\nimport { useTranslation } from \"@/app/i18n\";\nimport InstalledTab from \"./InstalledTab\";\nimport RepoTab from \"./RepoTab\";\nimport changeTitle from \"@/utils/title-change\";\nimport { useEffect } from \"react\";\n\nexport default function Page() {\n    const { t } = useTranslation(\"extensions\");\n    useEffect(() => {\n        changeTitle(t(\"title\"));\n    }, []);\n    return (\n        <Layout>\n            <BaseMargin>\n                <SwitchTitle title={t(\"title\")}></SwitchTitle>\n                <Tab\n                    tabs={[\n                        { title: t(\"installed\"), content: <InstalledTab /> },\n                        { title: t(\"repository\"), content: <RepoTab /> },\n                    ]}\n                />\n            </BaseMargin>\n        </Layout>\n    );\n}\n","E:\\project\\xuexi\\LuminaryLore\\app\\extension\\RepoTab.tsx",["340","341"],[],"\"use client\";\n\nimport Button from \"@/components/common/Button\";\nimport ErrorView from \"@/components/ErrorView\";\nimport LoadingBox from \"@/components/LoadingBox\";\nimport { useRootStore } from \"@/context/root-context\";\nimport { Extension, extensionDB } from \"@/db\";\nimport { getModel } from \"@/utils/model\";\nimport { useQuery } from \"@tanstack/react-query\";\nimport { Download, Trash, Upload } from \"lucide-react\";\nimport { observer } from \"mobx-react-lite\";\nimport { useSnackbar } from \"notistack\";\nimport { useEffect, useState } from \"react\";\nimport request from \"umi-request\";\nimport { useTranslation } from \"@/app/i18n\";\nimport Item from \"./Item\";\n\nconst RepoTab = observer(() => {\n    const { settingsStore, extensionStore } = useRootStore();\n    const [extensionMap, setExtensionMap] = useState<Map<string, boolean>>(\n        new Map()\n    );\n    const { enqueueSnackbar } = useSnackbar();\n    const { t } = useTranslation(\"extensions\");\n\n    useEffect(() => {\n        extensionDB.getAllExtensions().then((extensions) => {\n            const map = new Map();\n            extensions.forEach((extension) => {\n                map.set(extension.package, true);\n            });\n            setExtensionMap(map);\n        });\n    }, []);\n\n    const setExtensionMapAndUpdateView = (pkg: string, installed: boolean) => {\n        setExtensionMap((prevMap) => {\n            const newMap = new Map(prevMap);\n            newMap.set(pkg, installed);\n            return newMap;\n        });\n    };\n\n    const { data, error, isLoading, refetch } = useQuery({\n        queryKey: [\"getRepoExtensions\"],\n        queryFn: async () => {\n            const res = await request.get(\n                settingsStore.getSetting(\"miruRepo\") + \"/index.json\"\n            );\n            return res.filter(\n                (extension: Extension) =>\n                    extension.type ===\n                    getModel(settingsStore.getSetting(\"model\"))\n            );\n        },\n    });\n\n    useEffect(() => {\n        refetch();\n    }, [settingsStore.getSetting(\"model\")]);\n\n    if (error) {\n        return <ErrorView error={error}></ErrorView>;\n    }\n\n    if (isLoading) {\n        return (\n            <div className=\"m-14\">\n                <LoadingBox />\n            </div>\n        );\n    }\n\n    if (!data || data.length === 0) {\n        return (\n            <div className=\"mt-28 text-center\">\n                <p className=\"text-2xl font-bold\">\n                    {t(\"not-find-extension.title\")}\n                </p>\n                <p className=\"text-sm\">{t(\"not-find-extension.message\")}</p>\n            </div>\n        );\n    }\n\n    const handleInstall = async (pkg: string) => {\n        const script = await request.get(\n            `${settingsStore.getSetting(\"miruRepo\")}/repo/${pkg.trim()}.js`\n        );\n        if (!script) {\n            enqueueSnackbar(t(\"download-error\"), { variant: \"error\" });\n        }\n        extensionStore\n            .installExtension(script)\n            .then(() => {\n                setExtensionMapAndUpdateView(pkg, true);\n            })\n            .catch((err) => {\n                enqueueSnackbar(err, { variant: \"error\" });\n            });\n    };\n\n    const handleUninstall = async (pkg: string) => {\n        extensionStore.unloadExtension(pkg);\n        setExtensionMapAndUpdateView(pkg, false);\n    };\n\n    // 就重新安装（\n    const handleUpdate = async (pkg: string) => {\n        await handleUninstall(pkg);\n        await handleInstall(pkg);\n    };\n\n    return (\n        <div>\n            {data.map((extension: Extension, index: number) => (\n                <Item\n                    key={index}\n                    name={extension.name}\n                    pkg={extension.package}\n                    version={extension.version}\n                    icon={extension.icon}\n                >\n                    {extensionMap.get(extension.package) &&\n                        extension.version !==\n                            extensionStore.getExtension(extension.package)\n                                ?.version && (\n                            <Button\n                                onClick={() => {\n                                    handleUpdate(extension.package);\n                                }}\n                                className=\"ml-1 flex items-center\"\n                            >\n                                <Upload size={18}></Upload>\n                                <span className=\"ml-1 hidden md:inline-block\">\n                                    {t(\"update\")}\n                                </span>\n                            </Button>\n                        )}\n                    {extensionMap.get(extension.package) ? (\n                        <Button\n                            onClick={() => {\n                                handleUninstall(extension.package);\n                            }}\n                            className=\"ml-1 flex items-center\"\n                        >\n                            <Trash size={18}></Trash>\n                            <span className=\"ml-1 hidden md:inline-block\">\n                                {t(\"remove\")}\n                            </span>\n                        </Button>\n                    ) : (\n                        <Button\n                            onClick={() => {\n                                handleInstall(extension.package);\n                            }}\n                            className=\"ml-1 flex items-center\"\n                        >\n                            <Download size={18}></Download>\n                            <span className=\"ml-1 hidden md:inline-block\">\n                                {t(\"install\")}\n                            </span>\n                        </Button>\n                    )}\n                </Item>\n            ))}\n        </div>\n    );\n});\n\nexport default RepoTab;\n","E:\\project\\xuexi\\LuminaryLore\\app\\i18n\\index.ts",[],[],"E:\\project\\xuexi\\LuminaryLore\\app\\i18n\\settings.ts",[],[],"E:\\project\\xuexi\\LuminaryLore\\app\\layout.tsx",["342"],[],"E:\\project\\xuexi\\LuminaryLore\\app\\page.tsx",["343"],[],"\"use client\";\nimport BaseMargin from \"@/components/BaseMargin\";\nimport Layout from \"@/components/Layout\";\nimport SwitchTitle from \"@/components/SwitchTitle\";\nimport Collection from \"./Collection\";\nimport ContinueViewing from \"./ContinueViewing\";\nimport { useTranslation } from \"@/app/i18n\";\nimport { useEffect } from \"react\";\nimport changeTitle from \"@/utils/title-change\";\n\nexport default function Home() {\n    const { t } = useTranslation(\"home\");\n    useEffect(() => {\n        changeTitle(t(\"title\"));\n    }, []);\n    return (\n        <Layout>\n            <BaseMargin>\n                <SwitchTitle title={t(\"title\")}></SwitchTitle>\n                <h2 className=\"mb-5 text-2xl font-bold\">\n                    {t(\"continue-viewing\")}\n                </h2>\n                <ContinueViewing />\n                <h2 className=\"mb-5 text-2xl font-bold\">{t(\"collection\")}</h2>\n                <Collection />\n            </BaseMargin>\n        </Layout>\n    );\n}\n","E:\\project\\xuexi\\LuminaryLore\\app\\RootProvider.tsx",[],[],"E:\\project\\xuexi\\LuminaryLore\\app\\search\\loading.tsx",[],[],"E:\\project\\xuexi\\LuminaryLore\\app\\search\\page.tsx",["344","345","346"],[],"\"use client\";\nimport BaseMargin from \"@/components/BaseMargin\";\nimport Layout from \"@/components/Layout\";\nimport SwitchTitle from \"@/components/SwitchTitle\";\nimport Tab, { Tabs } from \"@/components/Tab\";\nimport { useRootStore } from \"@/context/root-context\";\nimport { Extension } from \"@/extension/extension\";\nimport { getModel } from \"@/utils/model\";\nimport { observer } from \"mobx-react-lite\";\nimport { useEffect, useState } from \"react\";\nimport { useTranslation } from \"@/app/i18n\";\nimport Result from \"./Result\";\nimport changeTitle from \"@/utils/title-change\";\nimport SearchAll from \"@/app/search/SearchAll\";\nimport { useRouter, useSearchParams } from \"next/navigation\";\n\nconst SearchPage = observer(() => {\n    const { extensionStore, settingsStore } = useRootStore();\n    const [tabs, setTabs] = useState<Array<Tabs>>([]);\n    const { t } = useTranslation(\"search\");\n    const [tabIndex, setTabIndex] = useState(0);\n    const param = useSearchParams();\n    const route = useRouter();\n    const [kw, setKW] = useState(\"\");\n    const [inputKW, setInputKW] = useState(\"\");\n\n    useEffect(() => {\n        if (param) {\n            setKW(param.get(\"kw\") ?? \"\");\n            setInputKW(param.get(\"kw\") ?? \"\");\n            setTabIndex(parseInt(param.get(\"tab\") ?? \"0\"));\n        }\n    }, [param]);\n\n    useEffect(() => {\n        changeTitle(t(\"title\"));\n    }, []);\n\n    useEffect(() => {\n        const newTabs: Array<Tabs> = [];\n        const extensions = extensionStore.getExtensionsByType(\n            getModel(settingsStore.getSetting(\"model\"))\n        );\n\n        // 搜索全部扩展\n        extensions.map((value: Extension) => {\n            newTabs.push({\n                title: value.name,\n                content: <Result extension={value} kw={kw} />,\n            });\n        });\n\n        if (newTabs.length > 1) {\n            newTabs.unshift({\n                title: t(\"all\"),\n                content: (\n                    <SearchAll\n                        toTab={(index) => handleSearch(index)}\n                        extensions={extensions}\n                        kw={kw}\n                    />\n                ),\n            });\n        }\n        setTabs(newTabs);\n    }, [settingsStore.getSetting(\"model\"), kw]);\n\n    const handleSubmit = (e: React.FormEvent<HTMLFormElement>) => {\n        e.preventDefault();\n        handleSearch(tabIndex);\n    };\n\n    const handleSearch = (index: number) => {\n        route.replace(`/search?kw=${inputKW}&tab=${index}`);\n    };\n\n    return (\n        <Layout>\n            <BaseMargin>\n                <SwitchTitle handleTabChange={()=>handleSearch(0)} title={t(\"title\")} />\n                <form className=\"mb-6\" onSubmit={handleSubmit}>\n                    <input\n                        type=\"text\"\n                        value={inputKW}\n                        className=\"w-full rounded-3xl border p-4 dark:bg-black dark:text-white\"\n                        placeholder={t(\"search-placeholder\") as string}\n                        onChange={(e) => setInputKW(e.target.value)}\n                    />\n                </form>\n\n                {/*无扩展时显示的界面*/}\n                {(tabs.length === 0 && (\n                    <div className=\"mt-28 text-center\">\n                        <p className=\"text-2xl font-bold\">\n                            {t(\"no-extension\")}\n                        </p>\n                        <p className=\"text-sm\">{t(\"no-extension-tips\")}</p>\n                    </div>\n                )) || (\n                    <Tab\n                        className=\"mb-6\"\n                        tabs={tabs}\n                        index={tabIndex}\n                        onChange={handleSearch}\n                    ></Tab>\n                )}\n            </BaseMargin>\n        </Layout>\n    );\n});\n\nexport default SearchPage;\n","E:\\project\\xuexi\\LuminaryLore\\app\\search\\Result.tsx",[],[],"E:\\project\\xuexi\\LuminaryLore\\app\\search\\SearchAll.tsx",[],[],"E:\\project\\xuexi\\LuminaryLore\\app\\settings\\AboutTab.tsx",[],[],"E:\\project\\xuexi\\LuminaryLore\\app\\settings\\DataTab.tsx",["347","348","349"],[],"\"use client\";\nimport { useTranslation } from \"@/app/i18n\";\nimport Button from \"@/components/common/Button\";\nimport { useRootStore } from \"@/context/root-context\";\nimport {\n    db,\n    exportData,\n    Extension,\n    ExtensionSettings,\n    History,\n    historyDB,\n    importData,\n    Love,\n    loveDB,\n    TMDB,\n    Settings\n} from \"@/db\";\nimport { Loader2 } from \"lucide-react\";\nimport { observer } from \"mobx-react-lite\";\nimport { enqueueSnackbar } from \"notistack\";\nimport { useEffect, useState } from \"react\";\nimport request from \"umi-request\";\nimport Input from \"./Input\";\nimport Title from \"./Title\";\n\nexport default function DataTab() {\n    const { historyStore } = useRootStore();\n    const { t } = useTranslation(\"settings\");\n    return (\n        <div>\n            <Title>{t(\"data.sync\")}</Title>\n            <Sync />\n            <Title>{t(\"data.storage\")}</Title>\n            <ClearCacheBotton\n                title={t(\"data.history\")}\n                count={historyStore.history.length}\n                clearCallBack={() => {\n                    historyStore.clearHistory();\n                }}\n            />\n            <ClearCacheBotton\n                title={t(\"data.collection\")}\n                count={loveDB.getAllLove}\n                clearCallBack={loveDB.deleteAllLove}\n            />\n        </div>\n    );\n}\n\nfunction ClearCacheBotton(props: {\n    title: string;\n    count: (() => Promise<Array<any>>) | number;\n    clearCallBack: () => void;\n}) {\n    const [count, setCount] = useState(0);\n    const { t } = useTranslation(\"settings\");\n\n    useEffect(() => {\n        if (typeof props.count === \"number\") {\n            setCount(props.count);\n            return;\n        }\n        props.count().then((res) => {\n            setCount(res.length);\n        });\n    }, []);\n\n    return (\n        <div className=\"mb-3\">\n            <span className=\"mr-3\">\n                {props.title}\n                <span className=\"rounded-lg bg-black  pl-2 pr-2 text-white\">\n                    {count}\n                </span>{\" \"}\n            </span>\n            <Button\n                onClick={() => {\n                    props.clearCallBack();\n                    // 直接给他显示0（\n                    setCount(0);\n                }}\n            >\n                {t(\"data.clear\")}\n            </Button>\n        </div>\n    );\n}\n\nconst Sync = observer(() => {\n    const { syncStore, historyStore, extensionStore, settingsStore } =\n        useRootStore();\n    const [cloudUpdateTime, setCloudUpdateTime] = useState<string>();\n    const [fileUrl, setFileUrl] = useState<string>();\n    const [loading, setLoading] = useState(false);\n    const { t } = useTranslation(\"settings\");\n\n    useEffect(() => {\n        (async () => {\n            try {\n                setLoading(true);\n                const res = await syncStore.pull();\n                setCloudUpdateTime(res?.updatedAt);\n                setFileUrl(res?.rawUrl);\n            } catch (error) {\n                enqueueSnackbar(t(\"data.get-backup-failed\") + error, { variant: \"error\" });\n            } finally {\n                setLoading(false);\n            }\n        })();\n    }, [settingsStore.getSetting(\"githubToken\")]);\n\n    const handlePush = async () => {\n        try {\n            setLoading(true);\n            // 固化缓存的历史记录\n            historyStore.init();\n\n            // 导出数据不包含视频封面\n            const data = await exportData();\n            data[0].map((item) => {\n                if (item.type === \"bangumi\") {\n                    item.cover = \"\";\n                }\n            });\n\n            // 脱敏\n            data[3].map((item) => {\n                if (item.key === \"githubToken\") {\n                    item.value = \"\";\n                }\n            });\n\n            const { rawUrl, updatedAt } = await syncStore.push(data);\n            setCloudUpdateTime(updatedAt);\n            enqueueSnackbar(t(\"data.backup-success\"), { variant: \"success\" });\n            setFileUrl(rawUrl);\n        } catch (error) {\n            enqueueSnackbar(t(\"data.backup-failed\") + error, { variant: \"error\" });\n        } finally {\n            setLoading(false);\n        }\n    };\n\n    const handleRestore = async () => {\n        try {\n            setLoading(true);\n            if (!fileUrl) {\n                enqueueSnackbar(t(\"data.please-backup-first\"), { variant: \"error\" });\n                return;\n            }\n            const res = (await request(fileUrl)) as [\n                History[],\n                Extension[],\n                Love[],\n                Settings[],\n                ExtensionSettings[],\n                TMDB[]\n            ];\n\n            // 如果本地历史记录有视频封面则不替换\n            await Promise.all(\n                res[0].map(async (item) => {\n                    if (item.type === \"bangumi\") {\n                        item.cover =\n                            (await historyDB.getHistory(item.url, item.package))\n                                ?.cover || \"\";\n                    }\n                })\n            );\n\n            // 不替换 githubToken\n            res[3].map((item) => {\n                if (item.key === \"githubToken\") {\n                    item.value = settingsStore.getSetting(\"githubToken\")\n                }\n            });\n\n            // 重置数据库\n            await db.delete();\n            await db.open();\n\n            await importData(res);\n\n            // 重新加载\n            await historyStore.init();\n            await extensionStore.init();\n            await settingsStore.init();\n\n            enqueueSnackbar(t(\"data.restore-success\"), { variant: \"success\" });\n        } catch (error) {\n            enqueueSnackbar(t(\"data.restore-failed\") + error, {\n                variant: \"error\"\n            });\n        } finally {\n            setLoading(false);\n        }\n    };\n\n    return (\n        <div className=\"mb-3\">\n            <Input title=\"Github Token\" bindKey=\"githubToken\"></Input>\n            {settingsStore.getSetting(\"githubToken\") && (\n                <div className=\"relative w-full items-center overflow-hidden rounded-lg border p-2 md:w-96\">\n                    <div className=\" flex items-center justify-between\">\n                        <div>\n                            <h2>{t(\"data.storage-time\")}</h2>\n                            <p>{cloudUpdateTime}</p>\n                        </div>\n                        <div>\n                            <Button className=\"mr-2\" onClick={handlePush}>\n                                {t(\"data.backup\")}\n                            </Button>\n                            <Button onClick={handleRestore}>\n                                {t(\"data.restore\")}\n                            </Button>\n                        </div>\n                    </div>\n                    {loading && (\n                        <div className=\"absolute left-0 right-0 bottom-0 top-0\">\n                            <div className=\"flex h-full w-full items-center justify-center bg-black bg-opacity-50\">\n                                <Loader2 className=\"animate-spin\" />\n                            </div>\n                        </div>\n                    )}\n                </div>\n            )}\n        </div>\n    );\n});\n","E:\\project\\xuexi\\LuminaryLore\\app\\settings\\GeneralTab.tsx",[],[],"E:\\project\\xuexi\\LuminaryLore\\app\\settings\\Input.tsx",["350","351"],[],"import { useRootStore } from \"@/context/root-context\";\nimport { Undo } from \"lucide-react\";\nimport { observer } from \"mobx-react-lite\";\nimport { ChangeEvent, useEffect, useState } from \"react\";\nimport Title from \"./Title\";\n\nconst Input = observer(\n    ({ title, bindKey }: { title: string; bindKey: string }) => {\n        const { settingsStore } = useRootStore();\n        const [value, setValue] = useState(\"\");\n\n        useEffect(() => {\n            setValue(settingsStore.getSetting(bindKey));\n        }, [settingsStore.getSetting(bindKey)]);\n\n        const handleChange = (e: ChangeEvent<HTMLInputElement>) => {\n            settingsStore.setSetting(bindKey, e.target.value);\n        };\n\n        return (\n            <div>\n                <Title className=\"flex\">\n                    {title}\n                    {settingsStore.envItems.get(bindKey) === value ? null : (\n                        <span className=\"ml-2 cursor-pointer\">\n                            {\" \"}\n                            <Undo\n                                width={20}\n                                onClick={() => {\n                                    settingsStore.resetSetting(bindKey);\n                                }}\n                            ></Undo>\n                        </span>\n                    )}\n                </Title>\n                <input\n                    className=\"mr-3 mb-3 w-full rounded-3xl border pl-3 pt-2 pb-2  pr-3 text-sm dark:bg-black md:w-96\"\n                    type=\"text\"\n                    value={value || \"\"}\n                    onChange={handleChange}\n                />\n            </div>\n        );\n    }\n);\n\nexport default Input;\n","E:\\project\\xuexi\\LuminaryLore\\app\\settings\\loading.tsx",[],[],"E:\\project\\xuexi\\LuminaryLore\\app\\settings\\page.tsx",["352"],[],"\"use client\";\nimport BaseMargin from \"@/components/BaseMargin\";\nimport Layout from \"@/components/Layout\";\nimport Tab from \"@/components/Tab\";\nimport { useTranslation } from \"@/app/i18n\";\nimport AboutTab from \"./AboutTab\";\nimport DataTab from \"./DataTab\";\nimport GeneralTab from \"./GeneralTab\";\nimport changeTitle from \"@/utils/title-change\";\nimport { useEffect } from \"react\";\n\nexport default function Page() {\n    const { t } = useTranslation(\"settings\");\n    useEffect(() => {\n        changeTitle(t(\"title\"));\n    }, []);\n    return (\n        <Layout>\n            <BaseMargin>\n                <h1 className=\"mb-6 text-3xl font-bold\">{t(\"title\")}</h1>\n                <Tab\n                    className=\"mb-6\"\n                    tabs={[\n                        { title: t(\"general.title\"), content: <GeneralTab /> },\n                        { title: t(\"data.title\"), content: <DataTab /> },\n                        { title: t(\"about.title\"), content: <AboutTab /> },\n                    ]}\n                />\n            </BaseMargin>\n        </Layout>\n    );\n}\n","E:\\project\\xuexi\\LuminaryLore\\app\\settings\\Select.tsx",[],[],"E:\\project\\xuexi\\LuminaryLore\\app\\settings\\Title.tsx",[],[],"E:\\project\\xuexi\\LuminaryLore\\pages\\404.tsx",[],[],"E:\\project\\xuexi\\LuminaryLore\\pages\\api\\request\\[...all].ts",[],[],"E:\\project\\xuexi\\LuminaryLore\\components\\BaseMargin.tsx",[],[],"E:\\project\\xuexi\\LuminaryLore\\components\\CheckUpdata.tsx",[],[],"E:\\project\\xuexi\\LuminaryLore\\components\\common\\Button.tsx",[],[],"E:\\project\\xuexi\\LuminaryLore\\components\\common\\IconButton.tsx",[],[],"E:\\project\\xuexi\\LuminaryLore\\components\\common\\Input.tsx",[],[],"E:\\project\\xuexi\\LuminaryLore\\components\\common\\LazyElement.tsx",[],[],"E:\\project\\xuexi\\LuminaryLore\\components\\common\\LoadingImg.tsx",["353","354","355"],[],"\"use client\";\nimport { ImgHTMLAttributes, useEffect, useRef, useState } from \"react\";\nimport SkeletonBlock from \"../SkeletonBlock\";\n\ninterface LoadingImgProps extends ImgHTMLAttributes<HTMLImageElement> {\n    loadview?: React.ReactNode;\n    errorview?: React.ReactNode;\n}\nexport default function LoadingImg(props: LoadingImgProps) {\n    const imgRef = useRef<HTMLImageElement>(null);\n    const [loaded, setLoaded] = useState(false);\n    const [error, setError] = useState(false);\n    useEffect(() => {\n        if (imgRef.current) {\n            if (imgRef.current.complete) {\n                setLoaded(true);\n                return;\n            }\n            imgRef.current.onload = () => {\n                setLoaded(true);\n            };\n            imgRef.current.addEventListener(\"error\", () => {\n                setError(true);\n            });\n        }\n        return () => {\n            if (imgRef.current) {\n                imgRef.current!.removeEventListener(\"error\", () => {\n                    console.log(\"error\");\n                });\n            }\n        };\n    }, [props.src]);\n    if (error) {\n        return (\n            <>\n                {props.errorview ?? (\n                    <div className=\"h-full w-full bg-gray-200\"></div>\n                )}\n            </>\n        );\n    }\n    return (\n        <>\n            {!loaded &&\n                (props.loadview ?? <SkeletonBlock className=\"h-full w-full\" />)}\n            <img hidden={!loaded} ref={imgRef} {...props} />\n        </>\n    );\n}\n","E:\\project\\xuexi\\LuminaryLore\\components\\common\\Select.tsx",[],[],"E:\\project\\xuexi\\LuminaryLore\\components\\ErrorView.tsx",[],[],"E:\\project\\xuexi\\LuminaryLore\\components\\icons\\icon.ts",[],[],"E:\\project\\xuexi\\LuminaryLore\\components\\icons\\IconLogo.tsx",[],[],"E:\\project\\xuexi\\LuminaryLore\\components\\InitView.tsx",[],[],"E:\\project\\xuexi\\LuminaryLore\\components\\ItemGrid.tsx",[],[],"E:\\project\\xuexi\\LuminaryLore\\components\\Layout.tsx",[],[],"E:\\project\\xuexi\\LuminaryLore\\components\\LoadingBox.tsx",[],[],"E:\\project\\xuexi\\LuminaryLore\\components\\Logo.tsx",[],[],"E:\\project\\xuexi\\LuminaryLore\\components\\Modal.tsx",[],[],"E:\\project\\xuexi\\LuminaryLore\\components\\Player\\Bangumi.tsx",["356","357","358"],[],"import { useRootStore } from \"@/context/root-context\";\nimport { BangumiWatch } from \"@/types/extension\";\nimport { useQuery } from \"@tanstack/react-query\";\nimport Artplayer from \"artplayer\";\nimport clsx from \"clsx\";\nimport Hls from \"hls.js\";\nimport { Pause, Play, SkipBack, SkipForwardIcon } from \"lucide-react\";\nimport { observer } from \"mobx-react-lite\";\nimport { useEffect, useRef, useState } from \"react\";\nimport ErrorView from \"../ErrorView\";\nimport LoadingBox from \"../LoadingBox\";\nimport artplayerPluginDashQuality from \"artplayer-plugin-dash-quality\";\nimport artplayerPluginHlsQuality from \"artplayer-plugin-hls-quality\";\n\nconst BangumiPlayer = observer(() => {\n    const { extensionStore, historyStore, playerStore } = useRootStore();\n    const currentPlay = playerStore.currentPlay;\n    const extension = extensionStore.getExtension(currentPlay.pkg);\n    const artRef = useRef<HTMLDivElement>(null);\n    const [art, setArt] = useState<Artplayer | undefined>();\n    const [playing, setPlaying] = useState(false);\n    const { data, error, isLoading } = useQuery({\n        queryKey: [\"watch\", currentPlay.url, currentPlay.pkg],\n        queryFn: () => {\n            return extension?.watch(currentPlay.url) as BangumiWatch;\n        },\n        staleTime: Infinity,\n    });\n\n    useEffect(() => {\n        if (!playerStore.playlist.length) {\n            art?.destroy(false);\n        }\n    }, [playerStore.playlist]);\n\n    useEffect(() => {\n        if (!artRef || !data) {\n            return;\n        }\n        // 切换非悬浮播放列表\n        playerStore.toggleFloatPlayList(false);\n\n        // 如果不是全屏则打开列表\n        if (!playerStore.fullScreen) {\n            playerStore.toggleShowPlayList(true);\n        }\n\n        // 如果不需要默认播放器\n        if (data.noDefaultPlayer) {\n            extension?.customPlayer(artRef.current as any, data.url, {} as any);\n            return;\n        }\n\n        // 如果 artplayer 已经初始化过了\n        if (!art?.isDestroy) {\n            art?.destroy(false);\n        }\n\n        // 如果 artRef.current 不存在\n        if (!artRef.current) {\n            return;\n        }\n\n        // 画质插件\n        let qualityPlugin: any;\n        if (data.type === \"hls\") {\n            qualityPlugin = artplayerPluginHlsQuality({\n                // Show quality in control\n                control: true,\n\n                // Show quality in setting\n                setting: true,\n\n                // Get the resolution text from level\n                getResolution: (level) => level.height + \"P\",\n\n                // I18n\n                title: \"Quality\",\n                auto: \"Auto\",\n            });\n        }\n        if (data.type === \"dash\") {\n            qualityPlugin = artplayerPluginDashQuality({\n                // Show quality in control\n                control: true,\n\n                // Show quality in setting\n                setting: true,\n\n                // Get the resolution text from level\n                getResolution: (level) => level.height + \"P\",\n\n                // I18n\n                title: \"Quality\",\n                auto: \"Auto\",\n            });\n        }\n\n        setArt(\n            new Artplayer({\n                container: artRef.current!,\n                // title: currentPlay.title + \" - \" + currentPlay.chapter,\n                url: data.url,\n                type: data.type,\n                pip: true,\n                screenshot: true,\n                setting: true,\n                flip: true,\n                lock: true,\n                playbackRate: true,\n                aspectRatio: true,\n                subtitleOffset: true,\n                miniProgressBar: true,\n                mutex: true,\n                backdrop: true,\n                playsInline: true,\n                lang: navigator.language.toLowerCase(),\n                autoPlayback: true,\n                airplay: true,\n                autoplay: true,\n                moreVideoAttr: {\n                    crossOrigin: \"anonymous\",\n                },\n                controls: [\n                    ...(data.controls || []),\n                    {\n                        position: \"left\",\n                        html: '<svg xmlns=\"http://www.w3.org/2000/svg\" width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"2\" stroke-linecap=\"round\" stroke-linejoin=\"round\" class=\"lucide lucide-skip-back\"><polygon points=\"19 20 9 12 19 4 19 20\"></polygon><line x1=\"5\" x2=\"5\" y1=\"19\" y2=\"5\"></line></svg>',\n                        index: 1,\n                        tooltip: \"上一集\",\n                        click: function () {\n                            playerStore.togglePrevPlay();\n                        },\n                    },\n                    {\n                        position: \"left\",\n                        html: '<svg xmlns=\"http://www.w3.org/2000/svg\" width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"2\" stroke-linecap=\"round\" stroke-linejoin=\"round\" class=\"lucide lucide-skip-forward\"><polygon points=\"5 4 15 12 5 20 5 4\"></polygon><line x1=\"19\" x2=\"19\" y1=\"5\" y2=\"19\"></line></svg>',\n                        index: 20,\n                        tooltip: \"下一集\",\n                        click: function () {\n                            playerStore.toggleNextPlay();\n                        },\n                    },\n                    {\n                        position: \"right\",\n                        html: '<svg xmlns=\"http://www.w3.org/2000/svg\" width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"2\" stroke-linecap=\"round\" stroke-linejoin=\"round\" class=\"lucide lucide-list\"><line x1=\"8\" x2=\"21\" y1=\"6\" y2=\"6\"></line><line x1=\"8\" x2=\"21\" y1=\"12\" y2=\"12\"></line><line x1=\"8\" x2=\"21\" y1=\"18\" y2=\"18\"></line><line x1=\"3\" x2=\"3.01\" y1=\"6\" y2=\"6\"></line><line x1=\"3\" x2=\"3.01\" y1=\"12\" y2=\"12\"></line><line x1=\"3\" x2=\"3.01\" y1=\"18\" y2=\"18\"></line></svg>',\n                        index: 1,\n                        tooltip: \"播放列表\",\n                        click: function () {\n                            playerStore.toggleShowPlayList();\n                        },\n                    },\n                    {\n                        position: \"right\",\n                        html: '<svg xmlns=\"http://www.w3.org/2000/svg\" width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"2\" stroke-linecap=\"round\" stroke-linejoin=\"round\" class=\"lucide lucide-maximize\"><path d=\"M8 3H5a2 2 0 0 0-2 2v3\"></path><path d=\"M21 8V5a2 2 0 0 0-2-2h-3\"></path><path d=\"M3 16v3a2 2 0 0 0 2 2h3\"></path><path d=\"M16 21h3a2 2 0 0 0 2-2v-3\"></path></svg>',\n                        index: 1000,\n                        tooltip: \"全屏\",\n                        click: function () {\n                            playerStore.toggleFullScreen();\n                        },\n                    },\n                ],\n                settings: [\n                    {\n                        width: 200,\n                        html: \"字幕\",\n                        selector: [\n                            {\n                                html: \"Display\",\n                                tooltip: \"Show\",\n                                switch: true,\n                                onSwitch: function (item) {\n                                    item.tooltip = item.switch\n                                        ? \"Hide\"\n                                        : \"Show\";\n                                    if (!art) {\n                                        return;\n                                    }\n                                    art.subtitle.show = !item.switch;\n                                    return !item.switch;\n                                },\n                            },\n                            {\n                                default: false,\n                                html: \"选择字幕文件\",\n                            },\n                            ...(data.subtitles || []),\n                        ],\n                        onSelect: function (item) {\n                            if (item.html === \"选择字幕文件\") {\n                                // 选择字幕文件\n                                const input = document.createElement(\"input\");\n                                input.type = \"file\";\n                                input.accept = \"text/srt\";\n                                input.click();\n                                input.onchange = function () {\n                                    if (!input.files) {\n                                        return;\n                                    }\n                                    const file = input.files[0];\n                                    if (file) {\n                                        item.url = URL.createObjectURL(file);\n                                        if (!art) {\n                                            return;\n                                        }\n                                        art.subtitle.switch(item.url, {\n                                            name: file.name,\n                                        });\n                                    }\n                                };\n                                return item.html;\n                            }\n                            if (!art) {\n                                return;\n                            }\n                            art.subtitle.switch(item.url, {\n                                name: item.html,\n                            });\n                            return item.html;\n                        },\n                    },\n                ],\n                plugins: [qualityPlugin],\n                subtitle: {\n                    type: \"srt\",\n                    style: {\n                        color: \"#000\",\n                        fontSize: \"20px\",\n                        textShadow:\n                            \"0 1px white, 1px 0 white, -1px 0 white, 0 -1px white\",\n                    },\n                    encoding: \"utf-8\",\n                },\n                customType: {\n                    hls: playM3u8,\n                    flv: playFlv,\n                    dash: playMpd,\n                    custom: extension?.customPlayer,\n                },\n            })\n        );\n\n        window.addEventListener(\"resize\", () => {\n            if (!art) {\n                return;\n            }\n            // art.autoHeight;\n        });\n    }, [data]);\n\n    const addHistory = async () => {\n        if (!art) {\n            return;\n        }\n        // 存储历史记录\n        historyStore.addHistory({\n            package: currentPlay.pkg,\n            url: currentPlay.pageUrl,\n            title: currentPlay.title,\n            chapter: currentPlay.chapter,\n            type: \"bangumi\",\n            cover: await art.getDataURL(),\n        });\n    };\n\n    useEffect(() => {\n        if (!art) {\n            return;\n        }\n\n        // 播放的时候 添加一次记录\n        art.on(\"video:play\", () => {\n            console.log(\"play\");\n            addHistory();\n            setPlaying(true);\n        });\n\n        art.on(\"pause\", () => {\n            setPlaying(false);\n        });\n\n        art.on(\"video:ended\", () => {\n            // 切换下一集\n            playerStore.toggleNextPlay();\n        });\n\n        // 销毁的时候 再添加一次历史记录\n        art.on(\"destroy\", () => {\n            // 如果播放器已经准备好了 就添加一次历史记录\n            // 防止截图为空\n            if (art.isReady) {\n                addHistory();\n            }\n        });\n        return () => {\n            if (art && art.destroy) {\n                art.destroy(false);\n            }\n        };\n    }, [art, playerStore.playlist, playerStore.index]);\n\n    const togglePlay = () => {\n        if (!art) {\n            return;\n        }\n        if (art.playing) {\n            art.pause();\n        } else {\n            art.play();\n        }\n    };\n\n    if (error) {\n        return <ErrorView error={error}></ErrorView>;\n    }\n\n    if (isLoading) {\n        return <LoadingBox className=\"!min-h-[250px] w-[250px]\" />;\n    }\n\n    if (!data) {\n        return <ErrorView error={\"地址获取失败\"} />;\n    }\n\n    return (\n        <div\n            className={clsx({\n                \"h-52 w-full flex-shrink lg:h-screen\": !playerStore.mini,\n                \"relative h-16 w-full lg:h-40 lg:w-96\": playerStore.mini,\n                \"!h-screen\": playerStore.fullScreen,\n            })}\n        >\n            <div className=\"h-full w-full\" ref={artRef}></div>\n            {playerStore.mini && art && (\n                // 缩小后的播放控件\n                <div\n                    className=\"absolute top-0 left-0 h-full w-full \"\n                    style={{ zIndex: 99999 }}\n                >\n                    <div className=\"flex h-full w-full items-center justify-center text-white opacity-0 transition-all hover:bg-black hover:bg-opacity-70 hover:opacity-100\">\n                        <button\n                            className=\"mx-3\"\n                            onClick={() => playerStore.togglePrevPlay()}\n                        >\n                            <SkipBack />\n                        </button>\n                        <button onClick={() => togglePlay()} className=\"mx-3\">\n                            {playing ? <Pause /> : <Play />}\n                        </button>\n                        <button\n                            onClick={() => playerStore.toggleNextPlay()}\n                            className=\"mx-3\"\n                        >\n                            <SkipForwardIcon />\n                        </button>\n                    </div>\n                </div>\n            )}\n        </div>\n    );\n});\n\nexport default BangumiPlayer;\n\nfunction playM3u8(video: HTMLMediaElement, url: string, art: Artplayer) {\n    if (Hls.isSupported()) {\n        // @ts-ignore\n        if (art.hls) art.hls.destroy();\n        const hls = new Hls();\n        hls.loadSource(url);\n        hls.attachMedia(video);\n        // @ts-ignore\n        art.hls = hls;\n        art.on(\"destroy\", () => hls.destroy());\n    } else if (video.canPlayType(\"application/vnd.apple.mpegurl\")) {\n        video.src = url;\n    } else {\n        art.notice.show = \"Unsupported playback format: m3u8\";\n    }\n}\n\nfunction playFlv(video: HTMLMediaElement, url: string, art: Artplayer) {\n    import(\"flv.js\")\n        .then((module) => {\n            const flvjs = module.default;\n            if (flvjs.isSupported()) {\n                // @ts-ignore\n                if (art.flv) art.flv.destroy();\n                const flv = flvjs.createPlayer({ type: \"flv\", url });\n                flv.attachMediaElement(video);\n                flv.load();\n                // @ts-ignore\n                art.flv = flv;\n                art.on(\"destroy\", () => flv.destroy());\n            } else {\n                art.notice.show = \"Unsupported playback format: flv\";\n            }\n        })\n        .catch((e) => {\n            art.notice.show = e;\n        });\n}\n\nfunction playMpd(video: HTMLMediaElement, url: string, art: Artplayer) {\n    import(\"dashjs\")\n        .then((module) => {\n            const dashjs = module.default;\n            if (dashjs.supportsMediaSource()) {\n                // @ts-ignore\n                if (art.dash) art.dash.destroy();\n                const dash = dashjs.MediaPlayer().create();\n                dash.initialize(video, url, art.option.autoplay);\n                // @ts-ignore\n                art.dash = dash;\n                art.on(\"destroy\", () => dash.destroy());\n            } else {\n                art.notice.show = \"Unsupported playback format: mpd\";\n            }\n        })\n        .catch((e) => {\n            art.notice.show = e;\n        });\n}","E:\\project\\xuexi\\LuminaryLore\\components\\Player\\control.tsx",[],[],"E:\\project\\xuexi\\LuminaryLore\\components\\Player\\Fikushon.tsx",["359"],[],"import { useRootStore } from \"@/context/root-context\";\nimport { FikushonWatch } from \"@/types/extension\";\nimport { useQuery } from \"@tanstack/react-query\";\nimport clsx from \"clsx\";\nimport { observer } from \"mobx-react-lite\";\nimport { useEffect } from \"react\";\nimport Button from \"../common/Button\";\nimport ErrorView from \"../ErrorView\";\nimport LoadingBox from \"../LoadingBox\";\nimport Control from \"./control\";\n\nconst FikushonPlayer = observer(() => {\n    const { extensionStore, historyStore, playerStore } = useRootStore();\n    const { pkg, pageUrl, title, chapter, url, type } = playerStore.currentPlay;\n    const extension = extensionStore.getExtension(pkg);\n\n    const { data, error, isLoading } = useQuery({\n        queryKey: [\"fikushon\", url, pkg],\n        queryFn: () => extension?.watch(url) as FikushonWatch,\n    });\n\n    useEffect(() => {\n        if (!data || type !== \"fikushon\") {\n            return;\n        }\n\n        playerStore.toggleFloatPlayList(true);\n        playerStore.toggleShowPlayList(false);\n\n        historyStore.addHistory({\n            package: pkg,\n            url: pageUrl,\n            title: title,\n            chapter: chapter!,\n            type: \"fikushon\",\n            cover: data.content[0],\n        });\n    }, [data]);\n\n    if (type !== \"fikushon\") {\n        return null;\n    }\n\n    if (isLoading) {\n        return <LoadingBox className=\"!h-screen\"></LoadingBox>;\n    }\n\n    if (error) {\n        return <ErrorView error={error} />;\n    }\n\n    if (!data) {\n        return <ErrorView error={new Error(\"No data\")} />;\n    }\n\n    return (\n        <>\n            <div\n                className={clsx(\n                    \"relative max-w-5xl text-center\",\n                    {\n                        \"max-h-screen overflow-auto\": !playerStore.mini,\n                         // mini 时不显示滚动条 且不能滚动 只做预览\n                        \"max-h-56 overflow-hidden scrollbar-none\":\n                            playerStore.mini,\n                    }\n                )}\n            >\n                <div className=\"mb-16 max-w-5xl bg-slate-200 p-3 text-left dark:bg-zinc-700\">\n                    <div className=\"mb-6 text-center\">\n                        <h1 className=\"text-2xl font-bold\">{data.title}</h1>\n                        <h2 className=\"text-lg\">{data.subtitle}</h2>\n                    </div>\n                    {data.content.map((item, index) => {\n                        return (\n                            <p className=\"mb-3 text-lg\" key={index}>\n                                {item}\n                            </p>\n                        );\n                    })}\n                </div>\n                {playerStore.mini && (\n                    <div className=\"absolute left-0 right-0 bottom-0 top-0 opacity-0 hover:opacity-100\">\n                        <div className=\"flex h-full w-full items-center justify-center bg-black bg-opacity-60\">\n                            <Button\n                                onClick={() => playerStore.toggleMini(false)}\n                            >\n                                继续观看\n                            </Button>\n                        </div>\n                    </div>\n                )}\n            </div>\n            <Control />\n        </>\n    );\n});\n\nexport default FikushonPlayer;\n","E:\\project\\xuexi\\LuminaryLore\\components\\Player\\Index.tsx",["360","361"],[],"import { motion } from \"framer-motion\";\nimport {\n    ChevronDown,\n    ChevronUp,\n    Maximize,\n    Minimize,\n    SidebarClose,\n    SidebarOpen,\n    X,\n} from \"lucide-react\";\nimport { ReactElement, useEffect, useRef, useState } from \"react\";\nimport BangumiPlayer from \"./Bangumi\";\nimport { useRootStore } from \"@/context/root-context\";\nimport { observer } from \"mobx-react-lite\";\nimport clsx from \"clsx\";\nimport MangaPlayer from \"./Manga\";\nimport FikushonPlayer from \"./Fikushon\";\nimport IconButton from \"../common/IconButton\";\n\nconst Player = observer(() => {\n    const { playerStore } = useRootStore();\n    const [player, setPlayer] = useState<ReactElement | undefined>(undefined);\n    const playRef = useRef<HTMLDivElement>(null);\n\n    // 如果全屏 取消body滚动\n    useEffect(() => {\n        if (!playerStore.mini) {\n            document.body.style.overflow = \"hidden\";\n        } else {\n            document.body.style.overflow = \"auto\";\n        }\n    }, [playerStore.mini]);\n\n    useEffect(() => {\n        if (!playerStore.currentPlay) {\n            return;\n        }\n        switch (playerStore.currentPlay.type) {\n            case \"bangumi\":\n                {\n                    setPlayer(<BangumiPlayer />);\n                }\n                break;\n            case \"manga\":\n                {\n                    setPlayer(<MangaPlayer />);\n                }\n                break;\n            case \"fikushon\": {\n                setPlayer(<FikushonPlayer />);\n            }\n        }\n    }, [playerStore.currentPlay]);\n\n    // 全屏切换\n    useEffect(() => {\n        if (!playRef.current) {\n            return;\n        }\n        if (!document.fullscreenElement && playerStore.fullScreen) {\n            playRef.current.requestFullscreen();\n            // 全屏时要收起播放列表\n            playerStore.toggleShowPlayList(false);\n            return;\n        }\n        // 如果不是按 esc 退出全屏则执行退出全屏\n        if (document.fullscreenElement && !playerStore.fullScreen) {\n            document.exitFullscreen();\n        }\n        playerStore.toggleShowPlayList(true);\n    }, [playerStore.fullScreen]);\n\n    // 如果是按esc退出全屏\n    playRef.current?.addEventListener(\"fullscreenchange\", (e) => {\n        if (!document.fullscreenElement) {\n            playerStore.toggleFullScreen(false);\n        }\n    });\n\n    // 切换迷你时需要先退出全屏\n    useEffect(() => {\n        if (!playerStore.mini) {\n            return;\n        }\n        playerStore.toggleFullScreen(false);\n    }, [playerStore.mini]);\n\n    if (!playerStore.playlist.length) {\n        return null;\n    }\n\n    return (\n        <motion.div\n            layout=\"preserve-aspect\"\n            ref={playRef}\n            layoutId=\"player\"\n            className={clsx(\n                \"fixed right-0 z-50 bg-neutral-100  dark:bg-neutral-700  lg:shadow-2xl \",\n                {\n                    \"top-0 left-0  h-screen\": !playerStore.mini,\n                },\n                {\n                    \"left-0 bottom-24 h-16 w-full overflow-hidden lg:left-auto lg:right-4 lg:bottom-4 lg:h-auto lg:max-h-64 lg:w-auto lg:max-w-md lg:rounded-lg\":\n                        playerStore.mini,\n                }\n            )}\n        >\n            {/* 操作栏 */}\n            {playerStore.mini && (\n                <div className=\"hidden w-full justify-between bg-black p-2 text-white dark:bg-zinc-700  lg:flex\">\n                    <button onClick={() => playerStore.clearPlayList()}>\n                        <X />\n                    </button>\n                    <button onClick={() => playerStore.toggleMini()}>\n                        <ChevronUp />\n                    </button>\n                </div>\n            )}\n            {/* 播放器内容 */}\n            <div\n                className={clsx(\"flex h-full lg:flex-row\", {\n                    \"flex-col\": !playerStore.fullScreen,\n                    \"flex-row\": playerStore.fullScreen,\n                })}\n            >\n                <div\n                    className={clsx(\"w-full\", {\n                        \"flex h-full items-center justify-between lg:p-0\":\n                            playerStore.mini,\n                    })}\n                >\n                    <div className=\"flex h-full items-center overflow-hidden\">\n                        <div\n                            className={clsx(\n                                \"relative flex h-full justify-center\",\n                                {\n                                    \"w-full\": !playerStore.mini,\n                                    \"mr-2 w-48 overflow-hidden lg:m-0 lg:w-auto\":\n                                        playerStore.mini,\n                                }\n                            )}\n                        >\n                            {player}\n                        </div>\n                        {/* 标题 */}\n                        {playerStore.mini && (\n                            <div className=\"flex items-center justify-center lg:hidden\">\n                                <div className=\"truncate\">\n                                    {playerStore.currentPlay?.title}\n                                </div>\n                            </div>\n                        )}\n                    </div>\n                    <div className=\"flex\">\n                        {/* 展开按钮 */}\n                        {playerStore.mini && (\n                            <button\n                                onClick={() => playerStore.toggleMini()}\n                                className=\"flex h-10 w-10 items-center justify-center lg:hidden\"\n                            >\n                                <ChevronUp />\n                            </button>\n                        )}\n                        {/* 关闭按钮 */}\n                        {playerStore.mini && (\n                            <button\n                                onClick={() => playerStore.clearPlayList()}\n                                className=\"flex h-10 w-10 items-center justify-center lg:hidden\"\n                            >\n                                <X />\n                            </button>\n                        )}\n                    </div>\n                </div>\n                <div\n                    hidden={playerStore.mini}\n                    className={clsx(\n                        \"flex h-full  flex-col overflow-hidden bg-neutral-200 transition-all dark:bg-neutral-800 \",\n                        {\n                            \"w-0 overflow-hidden\": !playerStore.showPlayList,\n                            \"lg:w-1/4\": playerStore.showPlayList,\n                            \"absolute right-0 lg:relative\":\n                                playerStore.floatPlayList,\n                            hidden: playerStore.mini,\n                        }\n                    )}\n                >\n                    <div className=\"flex flex-shrink-0 items-center justify-between px-3 py-1\">\n                        <div className=\"text-lg\">播放列表</div>\n                        <div className=\"flex\">\n                            <IconButton\n                                onClick={() => playerStore.toggleShowPlayList()}\n                            >\n                                {playerStore.showPlayList ? (\n                                    <SidebarOpen />\n                                ) : (\n                                    <SidebarClose />\n                                )}\n                            </IconButton>\n                            <IconButton\n                                className=\"mx-1\"\n                                onClick={() => playerStore.toggleFullScreen()}\n                            >\n                                {playerStore.fullScreen ? (\n                                    <Minimize />\n                                ) : (\n                                    <Maximize />\n                                )}\n                            </IconButton>\n                            <IconButton\n                                onClick={() => playerStore.toggleMini()}\n                            >\n                                <ChevronDown />\n                            </IconButton>\n                        </div>\n                    </div>\n                    <div className=\"h-full w-full overflow-auto\">\n                        {playerStore.playlist.map((item, index) => (\n                            <div\n                                key={item.url}\n                                className=\"my-2 flex cursor-pointer items-center px-2\"\n                                onClick={() => {\n                                    playerStore.togglePlay(index);\n                                }}\n                            >\n                                <div\n                                    className={clsx(\n                                        \" w-full truncate rounded-xl p-2 transition hover:bg-black hover:bg-opacity-40\",\n                                        {\n                                            \"bg-black bg-opacity-20 ring-2 ring-black dark:ring-white\":\n                                                item.url ===\n                                                playerStore.currentPlay?.url,\n                                        }\n                                    )}\n                                >\n                                    <div className=\"text-lg\">{item.title}</div>\n                                    <div className=\"text-sm \">\n                                        {item.chapter}\n                                    </div>\n                                </div>\n                            </div>\n                        ))}\n                    </div>\n                </div>\n            </div>\n        </motion.div>\n    );\n});\n\nexport default Player;\n","E:\\project\\xuexi\\LuminaryLore\\components\\Player\\Manga.tsx",["362"],[],"import { useRootStore } from \"@/context/root-context\";\nimport { MangaWatch } from \"@/types/extension\";\nimport { useQuery } from \"@tanstack/react-query\";\nimport clsx from \"clsx\";\nimport { ChevronDown, ChevronFirst, ChevronLast, List } from \"lucide-react\";\nimport { observer } from \"mobx-react-lite\";\nimport { SetStateAction, useEffect,useState } from \"react\";\nimport Button from \"../common/Button\";\nimport LazyElement from \"../common/LazyElement\";\nimport LoadingImg from \"../common/LoadingImg\";\nimport ErrorView from \"../ErrorView\";\nimport LoadingBox from \"../LoadingBox\";\nimport Control from \"./control\";\nlet autoDownload = false;\nlet currentURL: string ;\nlet currentInterval: string | number | NodeJS.Timeout | undefined ;\n// 保存已经加载完成的图。\nconst decodeTopUrls: { [key: string]: string[] } = {};\nconst MangaPlayer = observer(() => {\n    const { extensionStore, historyStore, playerStore } = useRootStore();\n    const { pkg, pageUrl, title, chapter, url, type } = playerStore.currentPlay;\n    const extension = extensionStore.getExtension(pkg);\n    const { data, error, isLoading } = useQuery({\n        queryKey: [\"manga\", url, pkg],\n        queryFn: () => {\n            currentURL = url\n            clearInterval(currentInterval);\n            return extension?.watch(url) as MangaWatch \n        },\n    });\n    const [decodeUrls, setDecodeUrls] = useState(data?.urls || []);\n    extension?.getSetting(\"autoDownload\").then((value)=>{\n        autoDownload = value == \"true\";\n    })\n    \n    useEffect(() => {\n        if (!data || type !== \"manga\") {\n            return;\n        }\n        playerStore.toggleFloatPlayList(true);\n        playerStore.toggleShowPlayList(false);\n        setDecodeUrls(decodeTopUrls[currentURL]?[...decodeTopUrls[currentURL]]:[...data.urls])\n        console.log(\"重新获取链接\", { urls:data.urls , decodeUrls });\n        historyStore.addHistory({\n            package: pkg,\n            url: pageUrl,\n            title,\n            chapter,\n            type: \"manga\",\n            cover: data.urls[0],\n        });\n    }, [data]);\n    if (isLoading) {\n        return <LoadingBox className=\"!h-screen\"></LoadingBox>;\n    }\n\n    if (error) {\n        return <ErrorView error={error} />;\n    }\n\n    if (!data) {\n        return <ErrorView error={new Error(\"No data\")} />;\n    }\n    if (type !== \"manga\") {\n        return null;\n    }\n    console.log(\"重新渲染\",currentURL);\n    let decodeImage = function(url: any, index: number,image: EventTarget | undefined ,autoLoad = false) {\n        if(index > data.urls.length - 1) return;\n        (extension as any).decodeImage && (extension as any).decodeImage(data.urls[index],function(newUrl:string) {\n            if(autoLoad) decodeImage(0,++index,undefined,autoLoad)\n            if(decodeUrls[index] == newUrl) return\n            decodeUrls[index] = newUrl;\n            setDecodeUrls([...decodeUrls]);\n            decodeTopUrls[currentURL] = [...decodeUrls];\n            if(decodeUrls.every((element, index) => element.startsWith(\"data:\"))){\n                // clearInterval(currentInterval)\n                setDecodeUrls([...decodeUrls]);\n                console.log(\"解码完毕！\",data);\n                decodeTopUrls[currentURL] = [...decodeUrls];\n                if(autoDownload) extension && (extension as any).download && (extension as any).download([...decodeUrls],title);\n            } else {\n                \n            }\n        });\n    }\n    const updateUrl:any = (url: any, index: number,image: EventTarget | undefined ,autoLoad = false) => {\n        if(playerStore.mini && index!=0 || index > data.urls.length - 1) return;\n        if((decodeUrls[index]?.startsWith(\"data:\"))) return\n        decodeImage(url, index,image,autoLoad)\n    };\n    updateUrl(data.urls[0],0,null,false)\n    let handleDownload = async function(){\n        let awaitDownload: string | number | NodeJS.Timeout | undefined ;\n        if((extension as any).download) {\n            console.log(\"正在重新检查解码\");\n            decodeImage(0,0,undefined,true);\n            clearInterval(awaitDownload)\n            awaitDownload = setInterval(()=>{\n                if(decodeUrls.every((element, index) => element.startsWith(\"data:\"))){\n                    console.log(\"开始下载啦！\");\n                    (extension as any).download([...decodeUrls],title);\n                    console.log(\"下载完成啦！\");\n                    clearInterval(awaitDownload)\n                }\n            },1000)\n\n        } else {\n            console.log(\"下载失败了\")\n            alert('没有该实现功能！');\n        }\n    }\n    return (\n        \n        <>\n            <div\n                className={clsx(\n                    \"relative max-w-5xl text-center\",\n                    {\n                        \"max-h-screen overflow-auto\": !playerStore.mini,\n                    },\n                    // mini 时不显示滚动条 且不能滚动 只做预览\n                    {\n                        \"max-h-56 overflow-hidden scrollbar-none\":\n                            playerStore.mini,\n                    }\n                )}\n            >\n                <div className=\"mb-16 w-full md:w-auto\">\n                    \n                    {decodeUrls.map( (url, index) => {\n                        return (\n                            <LazyElement\n                                key={index}\n                                placeholder={\n                                    <div className=\"h-40 w-full\">\n                                        <LoadingBox></LoadingBox>\n                                    </div>\n                                }\n                            >\n                                <LoadingImg\n                                    loadview={\n                                        <div className=\"h-40 w-full\">\n                                            <LoadingBox></LoadingBox>\n                                        </div>\n                                    }\n                                    className=\"m-auto\"\n                                    src={url}\n                                    alt=\"Manga\"\n                                    onMouseEnter={() => updateUrl(url,index)}\n                                    onLoad={(event) => {updateUrl(decodeUrls[index++],index++,event.target)}}\n                                    referrerPolicy=\"no-referrer\"\n                                />\n                            </LazyElement>\n                        );\n                    })}\n                    <Button\n                        className=\"ml-2\"\n                        onClick={() => {\n                            handleDownload();\n                        }}\n                    >\n                        <ChevronDown />\n                    </Button>\n                </div>\n                {/* mini 时显示的按钮 */}\n                {playerStore.mini && (\n                    <div className=\"absolute left-0 right-0 bottom-0 top-0 opacity-0 hover:opacity-100\">\n                        <div className=\"flex h-full w-full items-center justify-center bg-black bg-opacity-60\">\n                            <Button\n                                onClick={() => playerStore.toggleMini(false)}\n                            >\n                                继续观看\n                            </Button>\n                        </div>\n                    </div>\n                )}\n            </div>\n            <Control />\n        </>\n    );\n});\nexport default MangaPlayer;\n","E:\\project\\xuexi\\LuminaryLore\\components\\Sidebar.tsx",[],[],"E:\\project\\xuexi\\LuminaryLore\\components\\SkeletonBlock.tsx",[],[],"E:\\project\\xuexi\\LuminaryLore\\components\\SwitchTitle.tsx",[],[],"E:\\project\\xuexi\\LuminaryLore\\components\\Tab.tsx",[],[],{"ruleId":"363","severity":1,"message":"364","line":27,"column":8,"nodeType":"365","endLine":27,"endColumn":43,"suggestions":"366"},{"ruleId":"363","severity":1,"message":"367","line":27,"column":9,"nodeType":"368","endLine":27,"endColumn":42},{"ruleId":"363","severity":1,"message":"364","line":28,"column":8,"nodeType":"365","endLine":28,"endColumn":65,"suggestions":"369"},{"ruleId":"363","severity":1,"message":"367","line":28,"column":9,"nodeType":"368","endLine":28,"endColumn":42},{"ruleId":"363","severity":1,"message":"370","line":59,"column":8,"nodeType":"365","endLine":59,"endColumn":10,"suggestions":"371"},{"ruleId":"363","severity":1,"message":"372","line":124,"column":8,"nodeType":"365","endLine":124,"endColumn":16,"suggestions":"373"},{"ruleId":"363","severity":1,"message":"374","line":270,"column":8,"nodeType":"365","endLine":270,"endColumn":10,"suggestions":"375"},{"ruleId":"363","severity":1,"message":"376","line":161,"column":8,"nodeType":"365","endLine":161,"endColumn":41,"suggestions":"377"},{"ruleId":"363","severity":1,"message":"378","line":206,"column":8,"nodeType":"365","endLine":206,"endColumn":10,"suggestions":"379"},{"ruleId":"380","severity":1,"message":"381","line":145,"column":33,"nodeType":"382","endLine":150,"endColumn":35},{"ruleId":"383","severity":1,"message":"384","line":145,"column":33,"nodeType":"382","endLine":150,"endColumn":35},{"ruleId":"363","severity":1,"message":"385","line":45,"column":8,"nodeType":"365","endLine":45,"endColumn":14,"suggestions":"386"},{"ruleId":"380","severity":1,"message":"381","line":16,"column":21,"nodeType":"382","endLine":20,"endColumn":23},{"ruleId":"363","severity":1,"message":"387","line":16,"column":8,"nodeType":"365","endLine":16,"endColumn":10,"suggestions":"388"},{"ruleId":"363","severity":1,"message":"364","line":60,"column":8,"nodeType":"365","endLine":60,"endColumn":43,"suggestions":"389"},{"ruleId":"363","severity":1,"message":"367","line":60,"column":9,"nodeType":"368","endLine":60,"endColumn":42},{"ruleId":"380","severity":1,"message":"381","line":37,"column":93,"nodeType":"382","endLine":37,"endColumn":164},{"ruleId":"363","severity":1,"message":"387","line":15,"column":8,"nodeType":"365","endLine":15,"endColumn":10,"suggestions":"390"},{"ruleId":"363","severity":1,"message":"387","line":37,"column":8,"nodeType":"365","endLine":37,"endColumn":10,"suggestions":"391"},{"ruleId":"363","severity":1,"message":"392","line":66,"column":8,"nodeType":"365","endLine":66,"endColumn":47,"suggestions":"393"},{"ruleId":"363","severity":1,"message":"367","line":66,"column":9,"nodeType":"368","endLine":66,"endColumn":42},{"ruleId":"363","severity":1,"message":"394","line":66,"column":8,"nodeType":"365","endLine":66,"endColumn":10,"suggestions":"395"},{"ruleId":"363","severity":1,"message":"396","line":110,"column":8,"nodeType":"365","endLine":110,"endColumn":49,"suggestions":"397"},{"ruleId":"363","severity":1,"message":"367","line":110,"column":9,"nodeType":"368","endLine":110,"endColumn":48},{"ruleId":"363","severity":1,"message":"398","line":14,"column":12,"nodeType":"365","endLine":14,"endColumn":47,"suggestions":"399"},{"ruleId":"363","severity":1,"message":"367","line":14,"column":13,"nodeType":"368","endLine":14,"endColumn":46},{"ruleId":"363","severity":1,"message":"387","line":16,"column":8,"nodeType":"365","endLine":16,"endColumn":10,"suggestions":"400"},{"ruleId":"363","severity":1,"message":"401","line":28,"column":24,"nodeType":"402","endLine":28,"endColumn":31},{"ruleId":"380","severity":1,"message":"381","line":47,"column":13,"nodeType":"382","endLine":47,"endColumn":61},{"ruleId":"383","severity":1,"message":"384","line":47,"column":13,"nodeType":"382","endLine":47,"endColumn":61},{"ruleId":"363","severity":1,"message":"403","line":34,"column":8,"nodeType":"365","endLine":34,"endColumn":30,"suggestions":"404"},{"ruleId":"363","severity":1,"message":"405","line":249,"column":8,"nodeType":"365","endLine":249,"endColumn":14,"suggestions":"406"},{"ruleId":"363","severity":1,"message":"407","line":300,"column":8,"nodeType":"365","endLine":300,"endColumn":54,"suggestions":"408"},{"ruleId":"363","severity":1,"message":"409","line":38,"column":8,"nodeType":"365","endLine":38,"endColumn":14,"suggestions":"410"},{"ruleId":"363","severity":1,"message":"411","line":71,"column":8,"nodeType":"365","endLine":71,"endColumn":32,"suggestions":"412"},{"ruleId":"363","severity":1,"message":"411","line":86,"column":8,"nodeType":"365","endLine":86,"endColumn":26,"suggestions":"413"},{"ruleId":"363","severity":1,"message":"414","line":52,"column":8,"nodeType":"365","endLine":52,"endColumn":14,"suggestions":"415"},"react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'refetch'. Either include it or remove the dependency array.","ArrayExpression",["416"],"React Hook useEffect has a complex expression in the dependency array. Extract it to a separate variable so it can be statically checked.","CallExpression",["417"],"React Hook useEffect has missing dependencies: 'detail.title', 'pkg', 'setWatchData', 'tmdbStore', and 'url'. Either include them or remove the dependency array.",["418"],"React Hook useEffect has missing dependencies: 'extension.type', 'media_type', 'setWatchData', 't', and 'tmdbStore'. Either include them or remove the dependency array.",["419"],"React Hook useEffect has a missing dependency: 'checkLove'. Either include it or remove the dependency array.",["420"],"React Hook useEffect has missing dependencies: 'handleMore' and 'handlePlay'. Either include them or remove the dependency array.",["421"],"React Hook useEffect has missing dependencies: 'detail.episodes', 'handlePlay', 'historyStore', 'pageUrl', 'pkg', and 't'. Either include them or remove the dependency array.",["422"],"@next/next/no-img-element","Using `<img>` could result in slower LCP and higher bandwidth. Consider using `<Image />` from `next/image` to automatically optimize images. This may incur additional usage or cost from your provider. See: https://nextjs.org/docs/messages/no-img-element","JSXOpeningElement","jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","React Hook useEffect has missing dependencies: 'extension', 'pkg', and 'url'. Either include them or remove the dependency array.",["423"],"React Hook useEffect has a missing dependency: 't'. Either include it or remove the dependency array.",["424"],["425"],["426"],["427"],"React Hook useEffect has missing dependencies: 'extensionStore', 'handleSearch', 'settingsStore', and 't'. Either include them or remove the dependency array.",["428"],"React Hook useEffect has a missing dependency: 'props'. Either include it or remove the dependency array. However, 'props' will change when *any* prop changes, so the preferred fix is to destructure the 'props' object outside of the useEffect call and refer to those specific props inside useEffect.",["429"],"React Hook useEffect has missing dependencies: 'syncStore' and 't'. Either include them or remove the dependency array.",["430"],"React Hook useEffect has missing dependencies: 'bindKey' and 'settingsStore'. Either include them or remove the dependency array. If 'setValue' needs the current value of 'bindKey', you can also switch to useReducer instead of useState and read 'bindKey' in the reducer.",["431"],["432"],"The ref value 'imgRef.current' will likely have changed by the time this effect cleanup function runs. If this ref points to a node rendered by React, copy 'imgRef.current' to a variable inside the effect, and use that variable in the cleanup function.","Identifier","React Hook useEffect has a missing dependency: 'art'. Either include it or remove the dependency array.",["433"],"React Hook useEffect has missing dependencies: 'art', 'extension', and 'playerStore'. Either include them or remove the dependency array. You can also do a functional update 'setArt(a => ...)' if you only need 'art' in the 'setArt' call.",["434"],"React Hook useEffect has missing dependencies: 'addHistory' and 'playerStore'. Either include them or remove the dependency array.",["435"],"React Hook useEffect has missing dependencies: 'chapter', 'historyStore', 'pageUrl', 'pkg', 'playerStore', 'title', and 'type'. Either include them or remove the dependency array.",["436"],"React Hook useEffect has a missing dependency: 'playerStore'. Either include it or remove the dependency array.",["437"],["438"],"React Hook useEffect has missing dependencies: 'chapter', 'decodeUrls', 'historyStore', 'pageUrl', 'pkg', 'playerStore', 'title', and 'type'. Either include them or remove the dependency array.",["439"],{"desc":"440","fix":"441"},{"desc":"442","fix":"443"},{"desc":"444","fix":"445"},{"desc":"446","fix":"447"},{"desc":"448","fix":"449"},{"desc":"450","fix":"451"},{"desc":"452","fix":"453"},{"desc":"454","fix":"455"},{"desc":"456","fix":"457"},{"desc":"440","fix":"458"},{"desc":"456","fix":"459"},{"desc":"456","fix":"460"},{"desc":"461","fix":"462"},{"desc":"463","fix":"464"},{"desc":"465","fix":"466"},{"desc":"467","fix":"468"},{"desc":"456","fix":"469"},{"desc":"470","fix":"471"},{"desc":"472","fix":"473"},{"desc":"474","fix":"475"},{"desc":"476","fix":"477"},{"desc":"478","fix":"479"},{"desc":"480","fix":"481"},{"desc":"482","fix":"483"},"Update the dependencies array to be: [refetch]",{"range":"484","text":"485"},"Update the dependencies array to be: [historyStore.history, refetch]",{"range":"486","text":"487"},"Update the dependencies array to be: [detail.title, pkg, setWatchData, tmdbStore, url]",{"range":"488","text":"489"},"Update the dependencies array to be: [extension.type, media_type, setWatchData, t, tmdbId, tmdbStore]",{"range":"490","text":"491"},"Update the dependencies array to be: [checkLove]",{"range":"492","text":"493"},"Update the dependencies array to be: [detail, handleMore, handlePlay, playerStore.currentPlay]",{"range":"494","text":"495"},"Update the dependencies array to be: [detail.episodes, handlePlay, historyStore, pageUrl, pkg, t]",{"range":"496","text":"497"},"Update the dependencies array to be: [data, extension, pkg, url]",{"range":"498","text":"499"},"Update the dependencies array to be: [t]",{"range":"500","text":"501"},{"range":"502","text":"485"},{"range":"503","text":"501"},{"range":"504","text":"501"},"Update the dependencies array to be: [extensionStore, handleSearch, kw, settingsStore, t]",{"range":"505","text":"506"},"Update the dependencies array to be: [props]",{"range":"507","text":"508"},"Update the dependencies array to be: [syncStore, t]",{"range":"509","text":"510"},"Update the dependencies array to be: [bindKey, settingsStore]",{"range":"511","text":"512"},{"range":"513","text":"501"},"Update the dependencies array to be: [art, playerStore.playlist]",{"range":"514","text":"515"},"Update the dependencies array to be: [art, data, extension, playerStore]",{"range":"516","text":"517"},"Update the dependencies array to be: [art, playerStore.playlist, playerStore.index, addHistory, playerStore]",{"range":"518","text":"519"},"Update the dependencies array to be: [chapter, data, historyStore, pageUrl, pkg, playerStore, title, type]",{"range":"520","text":"521"},"Update the dependencies array to be: [playerStore, playerStore.fullScreen]",{"range":"522","text":"523"},"Update the dependencies array to be: [playerStore, playerStore.mini]",{"range":"524","text":"525"},"Update the dependencies array to be: [chapter, data, decodeUrls, historyStore, pageUrl, pkg, playerStore, title, type]",{"range":"526","text":"527"},[907,942],"[refetch]",[985,1042],"[historyStore.history, refetch]",[1949,1951],"[detail.title, pkg, setWatchData, tmdbStore, url]",[4491,4499],"[extension.type, media_type, setWatchData, t, tmdbId, tmdbStore]",[10731,10733],"[checkLove]",[6195,6228],"[detail, handleMore, handlePlay, playerStore.currentPlay]",[8125,8127],"[detail.episodes, handlePlay, historyStore, pageUrl, pkg, t]",[1680,1686],"[data, extension, pkg, url]",[542,544],"[t]",[2002,2037],[512,514],[1359,1361],[2177,2216],"[extensionStore, handleSearch, kw, settingsStore, t]",[1782,1784],"[props]",[3132,3173],"[syncStore, t]",[507,542],"[bindKey, settingsStore]",[519,521],[1394,1416],"[art, playerStore.playlist]",[10386,10392],"[art, data, extension, playerStore]",[11545,11591],"[art, playerStore.playlist, playerStore.index, addHistory, playerStore]",[1247,1253],"[chapter, data, historyStore, pageUrl, pkg, playerStore, title, type]",[2043,2067],"[playerStore, playerStore.fullScreen]",[2425,2443],"[playerStore, playerStore.mini]",[2033,2039],"[chapter, data, decodeUrls, historyStore, pageUrl, pkg, playerStore, title, type]"]